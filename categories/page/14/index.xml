<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Categories on my101du Blog</title>
    <link>http://blog.zhishibee.com/categories/</link>
    <description>Recent content in Categories on my101du Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    
        <atom:link href="http://blog.zhishibee.com/categories/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E9%85%8D%E7%BD%AE%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E9%85%8D%E7%BD%AE%E7%B3%BB%E7%BB%9F/</guid>
      <description>title: 配置系统 permalink: config-system tags: server https://blog.csdn.net/yfkiss/article/details/9008609 基于zookeeper构建 淘宝 Diamond apollo 随着程序功能的日益复杂，程序的配置日益增多：各种功能的开关、参数的配置、服务器的地址…</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/nginx%E6%90%AD%E5%BB%BA%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/nginx%E6%90%AD%E5%BB%BA%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>&lt;p&gt;title: Nginx搭建流媒体服务器
pemalink: Nginx-stream-media-server
tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运维&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/windows-bat%E6%89%B9%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/windows-bat%E6%89%B9%E5%A4%84%E7%90%86/</guid>
      <description>https://blog.csdn.net/gdp12315_gu/article/details/51322156</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E4%B8%BA%E7%AB%99%E7%82%B9%E5%90%AF%E7%94%A8https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E4%B8%BA%E7%AB%99%E7%82%B9%E5%90%AF%E7%94%A8https/</guid>
      <description>&lt;p&gt;title: 为站点启用HTTPS
permalink: make-your-website-https
tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTPS&lt;/li&gt;
&lt;li&gt;运维&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E4%BD%BF%E7%94%A8linux-nginxapache-mysql-php%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E4%BD%BF%E7%94%A8linux-nginxapache-mysql-php%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</guid>
      <description>&lt;p&gt;使用Linux+Nginx(Apache)+MySQL+PHP搭建网站&lt;/p&gt;
&lt;p&gt;permalink: linux-nginx-mysql-php-apache-set-up
date: 2016/05/25 10:10:10
tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运维&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.zhishibee.com/article_images/server/linux-nginx-mysql-php/lemp_cover.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;目前，有不少网站站长都不再满足于租用一个和别人共用的&lt;code&gt;虚拟主机&lt;/code&gt;（指开箱即用，或者简单配置后即可运行的网站），因为往往这些虚拟主机在开始的时候能满足需求，随着访问人数攀升，以及个性化定制需求的增加，各种不灵活的掣肘就浮现出来了。拥有一台自己拥有完全控制权的&lt;code&gt;独立服务器&lt;/code&gt;（或 &lt;code&gt;VPS&lt;/code&gt;，或现在流行的&lt;code&gt;云主机&lt;/code&gt;），用来搭建一个网站以及运行有意思的服务（爬虫、远程备份，等等），就成为进阶站长和技术爱好者的目标。&lt;/p&gt;
&lt;p&gt;又或者你只是想先在自己的电脑上搭建一个 PHP 的运行环境进行学习、开发。&lt;/p&gt;
&lt;p&gt;都可以在这里找到细致而详尽的答案。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;本文包括在三种主流的操作系统（Linux &amp;amp; Windows &amp;amp; OS X）上搭建 &lt;code&gt;Nginx+PHP+MySQL&lt;/code&gt; 环境的过程。因为 &lt;code&gt;LEMP&lt;/code&gt;（Linux + Nginx + MySQL + PHP）实际上已经是现在很多中小型网站运行的主流环境了，所以我们重点笔墨放在 Linux 上，我们也建议 Windows 的开发者尽可能使用虚拟机来安装 Linux，可以避免遇到很多莫名其妙的问题。&lt;/p&gt;
&lt;p&gt;本文并未涉及服务器的选购、 Linux 安装配置、以及 Nginx+PHP+MySQL 的性能优化等知识。
如果需要了解这些内容 ,请查看我们相关的教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itjiaoshou.com/how-to-buy-server-vps&#34;&gt;如何选购合适的独立服务器-vps-云主机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itjiaoshou.com/linux-install-config-and-command-useful&#34;&gt;Linux安装配置与常用命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itjiaoshou.com/linux-nginx-mysql-php-apache-optimize&#34;&gt;基于Linux+Nginx(Apache)+MySQL+PHP的网站优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;最简单的方式一键安装&#34;&gt;最简单的方式：一键安装&lt;/h1&gt;
&lt;h2 id=&#34;xampp&#34;&gt;XAMPP&lt;/h2&gt;
&lt;p&gt;跨平台的 Apache + MySQL(MariaDB)+ PHP，并自带了 Ftp 服务端、PhpMyAdmin等。&lt;/p&gt;
&lt;p&gt;下载 Linux 版本（.run 后缀名），安装后会在 &lt;code&gt;/opt/lampp&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 一些控制命令（修改了Apache、PHP、MySQL的配置文件后要重启）
./ctlscript.sh help
       ./ctlscript.sh (start|stop|restart|status)
       ./ctlscript.sh (start|stop|restart|status) mysql
       ./ctlscript.sh (start|stop|restart|status) proftpd
       ./ctlscript.sh (start|stop|restart|status) apache
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;linux-下的-lnmp-环境一键安装包&#34;&gt;Linux 下的 LNMP 环境一键安装包&lt;/h2&gt;
&lt;p&gt;如果你没有太多时间去研究各种软件包版本和库之间的依赖关系，而且对性能调优不太熟悉，只想尽快搭建一个可以快速运行起来的网站的话建议选择一键包。
一键包除了可以简化繁琐和容易出错的安装过程外，还有很强大的参数调整方式（通过命令行或图形界面）。
但也有缺陷，那就是安装的时候可定制型不强，一些特殊的模块可能并没有默认安装。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我最常用的是军哥的一键包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个一键包的作者有多年的运维经验，非常建议多读读安装脚本的代码，可以从中学到很多的知识。
在 &lt;a href=&#34;http://lnmp.org&#34;&gt;http://lnmp.org&lt;/a&gt; 下载，解压并运行安装脚本即可，安装过程中会有详细的提示，用于选择 PHP 版本、MySQL版本、默认 root 密码等等。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ wget -c http://soft.vpser.net/lnmp/lnmp1.3-full.tar.gz &amp;amp;&amp;amp; tar zxf lnmp1.3-full.tar.gz &amp;amp;&amp;amp; cd lnmp1.3-full &amp;amp;&amp;amp; ./install.sh lnmp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最新版的一键包支持 &lt;code&gt;PHP7&lt;/code&gt;(对比&lt;code&gt;PHP5&lt;/code&gt;有几倍的性能提升，但有部分函数不兼容一些比较古老的PHP框架/CMS，在稳定的生产环境中还是建议使用 &lt;code&gt;PHP5&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;除了安装基本的 &lt;code&gt;LEMP&lt;/code&gt; 环境外，还可以添加 &lt;code&gt;ftp 服务器&lt;/code&gt;、&lt;code&gt;memcached&lt;/code&gt; 内存缓存服务等功能。&lt;/p&gt;
&lt;p&gt;由于这个一键包没有提供图形界面的管理面板，所以只能通过命令行去启动服务、添加主机等操作。&lt;/p&gt;
&lt;p&gt;LNMP无法删除或更改权限，显示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rm: cannot remove `.user.ini&amp;rsquo;: Operation not permitted&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无法删除“.user.ini”文件解决方法,运行后删除即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chattr -i /home/wwwroot/default/.user.ini
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果是需要修改文件，记得修改完以后运行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chattr +i /home/wwwroot/default/.user.ini
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你对命令行并不熟练，也可以选择&lt;a href=&#34;http://www.wdlinux.cn/wdcp/&#34;&gt;WDCP&lt;/a&gt;、&lt;a href=&#34;https://amh.sh&#34;&gt;AMH&lt;/a&gt;等带有图形界面的管理面板，其中 好像&lt;code&gt;WDCP&lt;/code&gt;在阿里云上用得比较多；&lt;code&gt;AMH&lt;/code&gt;也是一个非常不错的环境，特点是有一个优化过的 MySQL 管理器 。&lt;/p&gt;
&lt;h2 id=&#34;默认不会安装-ext_ldap--ext_filenfo-等包&#34;&gt;默认不会安装 ext_ldap  ext_filenfo 等包&lt;/h2&gt;
&lt;p&gt;在laravel应用 composer install 会报错。需要手动安装&lt;/p&gt;
&lt;p&gt;以 ldap 为例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 先进入 src 目录, 解压 php 压缩包（bz2格式）
cd ~/lnmp1.5/src
tar -jxvf xx.tar.bz2

# 进入需要安装的扩展目录
cd php-7.1.18/ext/ldap

# 然后依次运行 （--with-ldap 可以不带？ fileinfo 测试）
/usr/local/php/bin/phpize
./configure --with-php-config=/usr/local/php/bin/php-config --with-ldap 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果报错&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;configure: error: Cannot find ldap.h&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;则安装下面的包后再运行 configure&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install openldap openldap-devel  -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果继续提示&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;configure: error: Cannot find ldap libraries in /usr/lib&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;则复制一些文件后重新 configure&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp -frp /usr/lib64/libldap* /usr/lib/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行make 命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提示如下，记住这个路径&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20160303/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;打开&lt;code&gt;/usr/local/php/etc/php.ini &lt;/code&gt;添加fileinfo.so扩展&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;extension = &amp;quot;ldap.so&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启确保生效,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;lnmp retstart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再运行下面的命令查看模块列表&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;php -m
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows-下的一键安装包&#34;&gt;Windows 下的一键安装包&lt;/h2&gt;
&lt;p&gt;XAMPP，比较大，只有 Apache&lt;/p&gt;
&lt;p&gt;UPUPW (有 Apache 或 Nginx 版本)，可以自己搭配 PHP &amp;amp; MySQL 版本&lt;/p&gt;
&lt;h1 id=&#34;apache-使用别的目录做虚拟主机目录时403-forbidden问题&#34;&gt;Apache 使用别的目录做虚拟主机目录时，403 Forbidden问题&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;#定义个目录
Define VHOSTS_ROOT &amp;quot;/mnt/share&amp;quot;

# 编辑 conf/httpd-vhosts.conf
# 使用了其他目录作为虚拟主机目录，这段是最重要的
&amp;lt;Directory &amp;quot;${VHOSTS_ROOT}&amp;quot;&amp;gt;
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;centos-系统安装-nginx--php--mysql&#34;&gt;CentOS 系统安装 Nginx + PHP &amp;amp; MySQL&lt;/h1&gt;
&lt;p&gt;对一些有软件洁癖的技术爱好者，或者一些老鸟来说，用一键包往往难以满足他们从头到尾控制安装过程的满足感。下面就分别介绍 &lt;code&gt;CentOS&lt;/code&gt; 和 &lt;code&gt;Ubuntu&lt;/code&gt; 这两个最流行的发行版上安装 &lt;code&gt;LEMP&lt;/code&gt; 环境的方法。&lt;/p&gt;
&lt;p&gt;这里默认的版本为 CentOS 7，部分在 CentOS 6 下有差异的地方附有说明。&lt;/p&gt;
&lt;h2 id=&#34;添加-epel-源&#34;&gt;添加 epel 源&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#因为 nginx 没有在官方源里面，需要添加epel源
$ sudo yum install epel-release

#还需要安装下面的 rpm 包以便能安装 PHP5.5

#如果是 CentOS 7 
$ rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm
$ rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm

#如果是 CentOS 6
$ rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装必需的软件和库&#34;&gt;安装必需的软件和库&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#下面的命令安装包含了 `pcre` `openssl` 等 `nginx` / `tengine` 必须要用到的库
$ yum -y install ntp make openssl openssl-devel pcre pcre-devel libpng libpng-devel libjpeg-6b libjpeg-devel-6b freetype freetype-devel gd gd-devel zlib zlib-devel gcc gcc-c++ libXpm libXpm-devel ncurses ncurses-devel libmcrypt libmcrypt-devel libxml2 libxml2-devel imake autoconf automake screen sysstat compat-libstdc++-33 curl curl-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装nginx&#34;&gt;安装Nginx&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;用 &lt;code&gt;yum&lt;/code&gt;来安装 Nginx&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo yum install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按照提示输入 &lt;code&gt;yes&lt;/code&gt; 后开始安装。安装完毕后，Nginx 的配置文件在 &lt;code&gt;/etc/nginx&lt;/code&gt; 目录下。其中 &lt;code&gt;sites-enabled&lt;/code&gt;目录中保存激活的虚拟主机配置文件。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#使用以下命令启动 Nginx：
$ sudo systemctl start nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;有时候可能存在问题：启动时或运行配置参数重新加载的命令 &lt;code&gt;nginx -s reload&lt;/code&gt; 时报错&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nginx: [error] open() &amp;ldquo;/run/nginx.pid&amp;rdquo; and failed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要 &lt;code&gt;-c&lt;/code&gt; 参数手动指定 nginx 的配置文件路径 &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ /usr/sbin/nginx -c /etc/nginx/nginx.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;最后将Nginx设置为开机启动&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo systemctl enable nginx.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后测试一下 nginx 服务是否正常运行。启动 nginx 服务后，通过浏览器访问&lt;code&gt;http://localhost&lt;/code&gt;（本地开发环境）或 &lt;code&gt;http://&amp;lt;外网IP地址&amp;gt;&lt;/code&gt; 来确定是否已经启动。如果一切正常，页面会显示一行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to Nginx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;补充&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更建议用 &lt;code&gt;Tengine&lt;/code&gt; 来替代 &lt;code&gt;Nginx&lt;/code&gt;，并用编译源代码的方式来安装，见后面的章节**“用 Tengine 替代 Nginx”**&lt;/p&gt;
&lt;h2 id=&#34;开放防火墙中的端口&#34;&gt;开放防火墙中的端口&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;检查系统中 firewalld 防火墙服务是否开启&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo systemctl status firewalld
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果已开启（显示 &lt;code&gt;active (running)&lt;/code&gt;），我们需要修改防火墙配置，开启外网访问 80 端口。
修改 &lt;code&gt;/etc/firewalld/zones/public.xml&lt;/code&gt; 文件，在 &lt;code&gt;&amp;lt;zone&amp;gt;&amp;lt;/zone&amp;gt;&lt;/code&gt;一节中增加 &lt;code&gt;&amp;lt;service name=&amp;quot;nginx&amp;quot;/&amp;gt;&lt;/code&gt;
关于防火墙的设置，可以学习我们讲解 CentOS 的安装和配置有关教程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保存后重新加载firewalld服务&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo systemctl reload firewalld
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装-mariadbmysql&#34;&gt;安装 MariaDB（MySQL）&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MariaDB&lt;/code&gt;是&lt;code&gt;MySQL&lt;/code&gt;的一个开源分支，在 MySQL 被甲骨文公司收购后，由开源社区进行开发和维护，在CentOS 7的软件仓库中，已经默认将 &lt;code&gt;MySQL&lt;/code&gt;更替为了&lt;code&gt;MariaDB&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用yum直接安装MariaDB&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install mariadb-server

#安装完成之后，执行以下命令启动MariaDB服务
sudo systemctl start mariadb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;基本安全设置（root密码等）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MariaDB默认&lt;code&gt;root&lt;/code&gt;密码为空，我们需要设置一下，执行脚本：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo /usr/bin/mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个脚本会经过如下一系列的交互问答来进行MariaDB的安全设置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先提示输入当前的root密码：
Enter current password for root (enter for none):
初始root密码为空，我们直接敲回车进行下一步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Set root password? [Y/n]
设置root密码，默认选项为Yes，我们直接回车，提示输入密码，在这里设置您的MariaDB的root账户密码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Remove anonymous users? [Y/n]
是否移除匿名用户，默认选项为Yes，建议按默认设置，回车继续。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Disallow root login remotely? [Y/n]
是否禁止root用户远程登录？如果您只在本机内访问MariaDB，建议按默认设置，回车继续。 如果您还有其他云主机需要使用root账号访问该数据库，则需要选择n。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Remove test database and access to it? [Y/n]
是否删除测试用的数据库和权限？ 建议按照默认设置，回车继续。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Reload privilege tables now? [Y/n]
是否重新加载权限表？因为我们上面更新了root的密码，这里需要重新加载，回车。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;登录测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;完成后你会看到Success!的提示，MariaDB的安全设置已经完成。我们可以使用以下命令登录MariaDB：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mysql -uroot -p

#按提示输入root密码，就会进入MariaDB的交互界面，说明已经安装成功。
mysql&amp;gt;
mysql&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;最后将MariaDB设置为开机启动&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo systemctl enable mariadb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;可能的问题：在连接外部数据库时提示无法连接&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error:Can&amp;rsquo;t connect to MySQL server on &amp;lsquo;10.211.55.2&amp;rsquo; (13)
Errno:2003&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;解决办法&lt;/em&gt; 关闭CentOS的 &lt;strong&gt;SELinux&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;setenforce 0
vi /etc/selinux/config
# 修改 SELINUX=enforcing 为 SELINUX=disabled
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;重装或替换-mariadb-为-mysql&#34;&gt;重装或替换 MariaDB 为 MySQL&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;卸载&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#查看CentOS自带mysql是否已安装
yum list installed | grep mysql

#若有自带安装的mysql，卸载CentOS系统自带mysql数据库，若有多个依赖文件则依次卸载
yum -y remove mysql-libs.x86_64
yum -y remove [依次卸载其他文件]

#当结果显示为Complete！即卸载完毕
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;开始安装&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#查看yum库上的mysql版本信息
yum list | grep mysql 或 yum -y list mysql*

#安装mysql-server，mysql(包括服务端和client)
yum -y install mysql-server mysql mysql-devel 

#查看刚安装mysql数据库版本信息
rpm -qi mysql-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后要重复之前安装过程中的 &lt;code&gt;基本安全设置&lt;/code&gt; 和 &lt;code&gt;登录测试&lt;/code&gt; 以及 &lt;code&gt;配置和优化&lt;/code&gt;步骤。&lt;/p&gt;
&lt;h2 id=&#34;安装php默认是54安装55的方法在后面一节&#34;&gt;安装PHP（默认是5.4，安装5.5的方法在后面一节）&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#先安装PHP(默认5.4)
yum install php php-fpm 

#安装php扩展
yum -y install  php-mysql php-gd  php-pear php-xml php-mhash php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-mcrypt

#安装完成后启动 php-fpm
sudo systemctl start php-fpm

#将php-fpm设置为开机启动
sudo systemctl enable php-fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;安装加速扩展如 XCache 等&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比较麻烦，建议直接安装 PHP5.5，自带有 Opcache&lt;/p&gt;
&lt;h2 id=&#34;卸载旧版本-php-与安装-高级版本php如-55laravel-等现代化的-php框架要求比较新的-php-版本&#34;&gt;卸载旧版本 PHP 与安装 高级版本PHP（如 5.5，Laravel 等现代化的 PHP框架要求比较新的 PHP 版本）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;卸载老版本（如5.4）以及对应的依赖&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum remove php php-fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;必须强制删除其他有关的包&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rpm -qa|grep php
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提示如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;php-pdo-5.1.6-27.el5_5.3
php-mysql-5.1.6-27.el5_5.3
php-xml-5.1.6-27.el5_5.3
php-cli-5.1.6-27.el5_5.3
php-common-5.1.6-27.el5_5.3
php-gd-5.1.6-27.el5_5.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意卸载要先卸载没有依赖的：pdo是mysql的依赖项；common是gd的依赖项；
例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# rpm -e php-pdo-5.1.6-27.el5_5.3
&amp;gt; error: Failed dependencies:
&amp;gt; php-pdo is needed by (installed) php-mysql-5.1.6-27.el5_5.3.i386
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以正确的卸载顺序是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rpm -e php-mysql-5.1.6-27.el5_5.3 
rpm -e php-pdo-5.1.6-27.el5_5.3 
rpm -e php-xml-5.1.6-27.el5_5.3 
rpm -e php-cli-5.1.6-27.el5_5.3 
rpm -e php-gd-5.1.6-27.el5_5.3 
rpm -e php-common-5.1.6-27.el5_5.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再用 &lt;code&gt;php -v&lt;/code&gt; 查看版本信息已经没有提示&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装PHP5.5以及扩展&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install php55w php55w-opcache php55w-common php55w-fpm php55w-gd php55w-imap php55w-mbstring php55w-mcrypt php55w-mysql php55w-pdo php55w-xml php55w-xmlrpc php55w-soap
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面是扩展的列表与简介，按你的需求添加（只需要添加你用到的即可，例如 mssql 等扩展就极少用到，不需要添加进去）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;php55w    mod_php, php55w-zts&lt;/li&gt;
&lt;li&gt;php55w-bcmath&lt;/li&gt;
&lt;li&gt;php55w-cli    php-cgi, php-pcntl, php-readline&lt;/li&gt;
&lt;li&gt;php55w-common    php-api, php-bz2, php-calendar, php-ctype, php-curl, php-date, php-exif, php-fileinfo, php-ftp, php-gettext, php-gmp, php-hash, php-iconv, php-json, php-libxml, php-openssl, php-pcre, php-pecl-Fileinfo, php-pecl-phar, php-pecl-zip, php-reflection, php-session, php-shmop, php-simplexml, php-sockets, php-spl, php-tokenizer, php-zend-abi, php-zip, php-zlib&lt;/li&gt;
&lt;li&gt;php55w-dba&lt;/li&gt;
&lt;li&gt;php55w-devel&lt;/li&gt;
&lt;li&gt;php55w-embedded    php-embedded-devel&lt;/li&gt;
&lt;li&gt;php55w-enchant&lt;/li&gt;
&lt;li&gt;php55w-fpm&lt;/li&gt;
&lt;li&gt;php55w-gd&lt;/li&gt;
&lt;li&gt;php55w-imap&lt;/li&gt;
&lt;li&gt;php55w-interbase    php_database, php-firebird&lt;/li&gt;
&lt;li&gt;php55w-intl&lt;/li&gt;
&lt;li&gt;php55w-ldap&lt;/li&gt;
&lt;li&gt;php55w-mbstring&lt;/li&gt;
&lt;li&gt;php55w-mcrypt&lt;/li&gt;
&lt;li&gt;php55w-mssql&lt;/li&gt;
&lt;li&gt;php55w-mysql    php-mysqli, php_database&lt;/li&gt;
&lt;li&gt;php55w-mysqlnd    php-mysqli, php_database&lt;/li&gt;
&lt;li&gt;php55w-odbc    php-pdo_odbc, php_database&lt;/li&gt;
&lt;li&gt;php55w-opcache    php55w-pecl-zendopcache&lt;/li&gt;
&lt;li&gt;php55w-pdo&lt;/li&gt;
&lt;li&gt;php55w-pecl-gearman&lt;/li&gt;
&lt;li&gt;php55w-pecl-geoip&lt;/li&gt;
&lt;li&gt;php55w-pecl-memcache&lt;/li&gt;
&lt;li&gt;php55w-pecl-xdebug&lt;/li&gt;
&lt;li&gt;php55w-pgsql    php-pdo_pgsql, php_database&lt;/li&gt;
&lt;li&gt;php55w-process    php-posix, php-sysvmsg, php-sysvsem, php-sysvshm&lt;/li&gt;
&lt;li&gt;php55w-pspell&lt;/li&gt;
&lt;li&gt;php55w-recode&lt;/li&gt;
&lt;li&gt;php55w-snmp&lt;/li&gt;
&lt;li&gt;php55w-soap&lt;/li&gt;
&lt;li&gt;php55w-tidy&lt;/li&gt;
&lt;li&gt;php55w-xml    php-dom, php-domxml, php-wddx, php-xsl&lt;/li&gt;
&lt;li&gt;php55w-xmlrpc&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装-php7&#34;&gt;安装 PHP7&lt;/h2&gt;
&lt;p&gt;首先还是要卸载旧版的 PHP&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum remove php-fpm php-cli php-common
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;开始安装&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install php70u-fpm-nginx php70u-cli php70u-mysqlnd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改 &lt;code&gt;php-fpm&lt;/code&gt;配置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vi /etc/php-fpm.d/www.conf

#将 listen = 127.0.0.1:9000 注释掉，使用 php-fpm.sock 方式

#去掉这行的注释
listen.acl_users = nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在以后的 Nginx 虚拟主机配置文件中，&lt;code&gt;location ~ \.php$ {&lt;/code&gt; 配置中，要设置 &lt;code&gt;fastcgi_pass&lt;/code&gt;为 &lt;code&gt;unix:/var/run/php-fpm/php-fpm.sock;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;#Nginx 的虚拟主机配置
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;ubuntu-系统安装-lemp&#34;&gt;Ubuntu 系统安装 LEMP&lt;/h1&gt;
&lt;p&gt;Ubuntu 的软件源和 &lt;code&gt;apt-get&lt;/code&gt; 命令非常强大，除了安装时自动解决或提示烦人的依赖关系，在需要卸载和和清理软件的时候也是很方便的。这可能和 CentOS 特别追求稳定，一般在生产环境配置好后就不怎么动了；而 Ubuntu 比较倾向于开发者日常使用，经常会更新软件和修改配置（当然 Ubuntu Server 也非常稳定）&lt;/p&gt;
&lt;p&gt;以下均以 Ubuntu 14.04 LTS 为例。&lt;/p&gt;
&lt;h2 id=&#34;安装必备的环境&#34;&gt;安装必备的环境&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install build-essential
apt-get install libpcre3 libpcre3-dev
apt-get install libssl-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;通过-apt-get-快速安装mysqlnginx&#34;&gt;通过 apt-get 快速安装MySQL、Nginx&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#先 update 一下
sudo apt-get update

#Nginx
sudo apt-get install nginx
sudo service nginx start
sudo service nginx restart

#MySQL 如果是 14.10 可能会提示“非稳定版……”，使用 mysql-server-5-5 即可
sudo apt-get install mysql-server 

# 如果上面出错，也可以下载repo再安装 MySQL
http://dev.mysql.com/downloads/repo/apt/
sudo dpkg -i /PATH/version-specific-package-name.deb
sudo apt-get install mysql-server

# 安装 MySQL 的系统数据库，以及初始化安全配置
sudo mysql_install_db
sudo /usr/bin/mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装php&#34;&gt;安装PHP&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;安装 PHP5&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install php5-fpm php5-mysql

# 编辑 php-fpm 配置，修改 listen（注释之前的 127.0.0.1:9000）,注意以后的 Nginx 虚拟主机都用这个
vi /etc/php5/fpm/pool.d/www.conf
listen = /var/run/php5-fpm.sock

# 重新启动 php5-fpm 服务
sudo service php5-fpm restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;安装 PHP7&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo add-apt-repository ppa:ondrej/php

# 如果失败
$ sudo apt-get install -y language-pack-en-base
$ sudo LC_ALL=en_US.UTF-8 add-apt-repository ppa:ondrej/php

$ sudo apt-get update

# 如果 web 服务器是 apache
$ sudo apt-get install php7.0 php7.0-mysql

# 如果 web 服务器是 nginx
$ sudo apt-get install php7.0-fpm php7.0-mysql

$ sudo service nginx restart
$ php -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;浏览已安装的程序。要查看已安装的软件包列表，请输入以下命令。请注意你希望卸载的软件包的名称。&lt;/p&gt;
&lt;p&gt;dpkg &amp;ndash;list
3
卸载程序和所有配置文件。在终端中输入以下命令，把&lt;!-- raw HTML omitted --&gt;替换成你希望完全移除的程序：&lt;/p&gt;
&lt;p&gt;sudo apt-get &amp;ndash;purge remove &lt;!-- raw HTML omitted --&gt;
4
只卸载程序。如果你移除程序但保留配置文件，请输入以下命令：&lt;/p&gt;
&lt;p&gt;sudo apt-get remove &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;可以隔段时间 apt-get autoremove 移除没用的包&lt;/p&gt;
&lt;h1 id=&#34;用-tengine-替代-nginx&#34;&gt;用 Tengine 替代 Nginx&lt;/h1&gt;
&lt;p&gt;在之前，不管是 CentOS 还是 Ubuntu，我们都是通过系统自带的 &lt;code&gt;yum&lt;/code&gt;或 &lt;code&gt;apt-get&lt;/code&gt;安装的 Nginx，没有使用手动编译的方式， 虽然大部分的时候这种方式已经满足需求的，但如果某些时候需要启用高级特性，就只能通过编译源码的方式来安装。&lt;/p&gt;
&lt;p&gt;Nginx 的源码包和文档，可以在 &lt;a href=&#34;https://www.nginx.com/resources/wiki/&#34;&gt;Nginx 官网&lt;/a&gt;下载和学习，解压后按文档说明一步步来就可以了。然而我们中国的淘宝技术团队，做了一个更不错的替代品—— Tengine。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tengine&lt;/code&gt; 是淘宝基于 Nginx 开发的一个 Web 服务器，在性能和安全等方面进行了增强，见 &lt;a href=&#34;http://tengine.taobao.org/document_cn/install_cn.html&#34;&gt;Tengine官方文档&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget http://tengine.taobao.org/download/tengine-2.1.2.tar.gz
tar zxvf tengine-2.1.2.tar.gz
cd tengine-2.1.2
./configure --with-http_sysguard_module --with-http_realip_module
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;默认会安装到路径 &lt;code&gt;/usr/local/nginx&lt;/code&gt; 下，配置文件路径为 &lt;code&gt;/usr/local/nginx/conf/nginx.conf&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;部分云服务器的-ubuntu-下由于-ipv6-地址导致报错的问题&#34;&gt;部分云服务器的 Ubuntu 下由于 IPV6 地址导致报错的问题&lt;/h2&gt;
&lt;p&gt;在 Vultr 上一台服务器，安装 Ubuntu 14.04，安装 tengine 后无法启动或 &lt;code&gt;nginx -t&lt;/code&gt; 测试，报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nginx: [emerg] invalid port in resolver &amp;ldquo;2001:19f0:300:1704::6&amp;rdquo; in /usr/local/nginx/conf/nginx.conf:123&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是因为服务器用了 IPV6 地址，而 tengine 还不支持的原因。关掉即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vi /etc/resolv.conf

#注释IPv6地址
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;nginx-的配置&#34;&gt;Nginx 的配置&lt;/h1&gt;
&lt;h2 id=&#34;配置php虚拟主机&#34;&gt;配置PHP虚拟主机&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; PHP 5 和 PHP 7 安装后，php-fpm 配置参数是不同的，在 Nginx 的 vhosts 文件里要注意修改 &lt;code&gt;fastcgi_pass&lt;/code&gt; 字段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/var/run/php5-fpm.sock&lt;/li&gt;
&lt;li&gt;/var/run/php/php7.0-fpm.sock&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;server {
        listen   80;
     
        root /usr/share/nginx/www;
        index index.php index.html index.htm;

        server_name example.com;

        location / {
                try_files $uri $uri/ /index.html;
        }

        error_page 404 /404.html;

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
              root /usr/share/nginx/www;
        }

        # pass the PHP scripts to FastCGI server listening on /var/run/php5-fpm.sock
        location ~ \.php$ {
                try_files $uri =404;
                fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                include fastcgi_params;
                
        }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;在-nginx-里添加虚拟主机并运行-php-站点&#34;&gt;在 Nginx 里添加虚拟主机并运行 PHP 站点&lt;/h2&gt;
&lt;p&gt;这时 &lt;code&gt;php-fpm&lt;/code&gt; 已经安装完毕，但是现在需要配置一下 Nginx，在 &lt;code&gt;/etc/nginx/conf.d&lt;/code&gt; 目录中新建一个名为 &lt;code&gt;test.conf &lt;/code&gt;的文件（注：Tengine路径不一样，在 &lt;code&gt;/usr/local/nginx/conf&lt;/code&gt; 中），其内容为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;server {
    listen 80;

    location ~ \.php$ {
        root          /usr/local/nginx/htdocs/test;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后执行以下命令使我们的配置生效：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo systemctl reload nginx
# 或者
nginx -s reload
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;测试php脚本是否正常运行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt; /usr/local/nginx/htdocs/test&lt;/code&gt; 里新建一个 PHP 文件 &lt;code&gt;index.php&lt;/code&gt; ，编辑里面的内容为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php echo phpinfo(); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后使用浏览器访问 http://localhost/test/index.php&lt;/p&gt;
&lt;h1 id=&#34;安装-apache-与-php-支持&#34;&gt;安装 Apache 与 PHP 支持&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://php.net/manual/en/install.unix.apache2.php&#34;&gt;http://php.net/manual/en/install.unix.apache2.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或用 XAMPP。&lt;/p&gt;
&lt;h2 id=&#34;虚拟主机&#34;&gt;虚拟主机&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 添加基于端口的虚拟主机
$ vi xamppfiles/etc/httpd.conf

# 添加 Listen 8888 等所有新虚拟主机的端口，每个虚拟主机的端口都要添加进去
Listen 80
Listen 8888
# 去掉 Include httpd-vhosts.conf 文件，引入虚拟主机配置文件
# Virtual hosts
Include etc/extra/httpd-vhosts.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑 /config/extra/httpd-vhosts.conf&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多端口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一定要记得先在 httpd.conf 里添加 Listen&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Listen 80
Listen 8888
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 增加多个端口对应的虚拟主机
&amp;lt;VirtualHost *:8888&amp;gt;
    ServerAdmin webmaster@dummy-host2.example.com
    DocumentRoot &amp;quot;D:/Project/WebSite/Other/dev-helper/public&amp;quot;
    # 这里是 localhost
    ServerName localhost
    ErrorLog &amp;quot;logs/dummy-host2.example.com-error.log&amp;quot;
    ##CustomLog &amp;quot;logs/dummy-host2.example.com-access.log&amp;quot; common

    &amp;lt;Directory &amp;quot;D:/Project/WebSite/Other/dev-helper/public&amp;quot;&amp;gt;
        Options Indexes FollowSymLinks Includes ExecCGI
        AllowOverride All
        Require all granted
    &amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;共用一个 80 端口，多个域名&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;lt;VirtualHost *:80&amp;gt;
    ServerAdmin webmaster@dummy-host2.example.com
    DocumentRoot &amp;quot;D:/Project/WebSite/Other/dev-helper/public&amp;quot;
    # 这里是本地测试域名
    ServerName dev-helper.test.com
    ErrorLog &amp;quot;logs/dummy-host2.example.com-error.log&amp;quot;
    ##CustomLog &amp;quot;logs/dummy-host2.example.com-access.log&amp;quot; common

    &amp;lt;Directory &amp;quot;D:/Project/WebSite/Other/dev-helper/public&amp;quot;&amp;gt;
        Options Indexes FollowSymLinks Includes ExecCGI
        AllowOverride All
        Require all granted
    &amp;lt;/Directory&amp;gt;

&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改 /etc/hosts&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;127.0.0.1  dev-helper.test.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3 重新启动&lt;/p&gt;
&lt;p&gt;$ xamppfiles/bin/apachectl -k restart&lt;/p&gt;
&lt;h2 id=&#34;环境变量&#34;&gt;环境变量&lt;/h2&gt;
&lt;p&gt;在 vhost 里&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;lt;VirtualHost *:80&amp;gt;
    # ...
    SetEnv RUN_MODE production
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows--xampp-下的-memcachememcached&#34;&gt;windows + xampp 下的 memcache/memcached&lt;/h2&gt;
&lt;p&gt;大部分 windows 下的 php 扩展都能在这里找  &lt;a href=&#34;https://windows.php.net/downloads/pecl/releases/&#34;&gt;https://windows.php.net/downloads/pecl/releases/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;extension&#34;&gt;extension&lt;/h3&gt;
&lt;p&gt;如果 /ext/ 下没有 php_memcache 需要下载&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pecl.php.net/package/memcache&#34;&gt;https://pecl.php.net/package/memcache&lt;/a&gt;  找到版本对应的 dll    （测试过 nts 无法加载， 必须是 ts 版本）&lt;/p&gt;
&lt;p&gt;在 php.ini 末尾添加&lt;/p&gt;
&lt;p&gt;extension=php_memcache.dll
[Memcache]
memcache.allow_failover = 1
memcache.max_failover_attempts=20
memcache.chunk_size =8192
memcache.default_port = 11211&lt;/p&gt;
&lt;h3 id=&#34;memcache-server&#34;&gt;memcache server&lt;/h3&gt;
&lt;h3 id=&#34;注意--memcache-和-memcached-是不同的windows-下不再支持了因为-libmemcached-doesnt-work-on-windows&#34;&gt;注意  memcache 和 memcached 是不同的，windows 下不再支持了，因为 libmemcached doesn&amp;rsquo;t work on Windows.&lt;/h3&gt;
&lt;p&gt;先判断下？ 或者在开发环境（windows）中临时插入代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;if(!class_exists(&#39;Memcached&#39;)) {
    class Memcached extends Memcache
    {
        public function set($key, $var, $expire = null)
        {
            /**
             * @see http://php.net/manual/en/memcache.set.php
             * @see http://php.net/manual/en/memcached.set.php
             */
            parent::set($key, $var, null, $expire);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows-下的-imagick&#34;&gt;windows 下的 imagick&lt;/h2&gt;
&lt;p&gt;解压后复制 php_imagick.dll 到  ext
还有复制全部  CORE_RL 开头和 IM_MOD_RL 开头的 dll 到  php.exe 所在的同级目录&lt;/p&gt;
&lt;p&gt;修改 php.ini   添加  extension=php_imagick.dll&lt;/p&gt;
&lt;p&gt;重启&lt;/p&gt;
&lt;h1 id=&#34;php-相关配置&#34;&gt;PHP 相关配置&lt;/h1&gt;
&lt;h2 id=&#34;解决-php-无法写入-session-的问题&#34;&gt;解决 php 无法写入 session 的问题&lt;/h2&gt;
&lt;p&gt;php安装完成之后，需要设置一下php session的目录，并注意修改目录权限为你的web目录用户权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo mkdir /var/lib/php/session/
sudo chown -R apache:apache /var/lib/php/session/
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;配置-phpini&#34;&gt;配置 php.ini&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#设置默认时区
date.timezone = PRC

#禁用函数列表，如果需要再删除
disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,getservbyname,getservbyport,disk_total_space

#设置表示允许访问当前目录(即PHP脚本文件所在之目录)和/tmp/目录,可以防止php木马跨站,如果改了之后安装程序有问题(例如：织梦内容管理系统)，可以注销此行，或者直接写上程序/data/www.111cn.net/:/tmp/
open_basedir = .:/tmp/ 

#关闭错误报告在前台页面显示
display_errors = OFF

# 设置 cgi.fix_pathinfo
cgi.fix_pathinfo=0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;##php 的 opcache 和 nginx 的 sendfile 导致修改文件代码不生效问题&lt;/p&gt;
&lt;p&gt;lnmp 环境配置好后，发现修改 PHP 代码，还是会显示前面代码的输出结果。本地开发环境需要修改两处&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;php.ini 文件  把 opcache enable 改成 0 (关闭)&lt;/li&gt;
&lt;li&gt;nginx.config 里把 sendfile 改成 off&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重启两个服务&lt;/p&gt;
&lt;h1 id=&#34;mysqlmariadb的配置&#34;&gt;MySQL(MariaDB)的配置&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;拷贝一个默认配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 根据机器的性能，将/usr/share/mysql/目录下的某个配置文件复制到 /etc 下，例如 my-huge.cnf
cp /usr/share/mysql/my-huge.cnf /etc/my.cnf 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：如果/etc目录下面默认有一个 &lt;code&gt;my.cnf&lt;/code&gt;，直接覆盖即可&lt;/p&gt;
&lt;h2 id=&#34;提示-mysqli_connect-hy0002002-no-such-file-or-directory&#34;&gt;提示 mysqli_connect(): (HY000/2002): No such file or directory&lt;/h2&gt;
&lt;p&gt;如果你装了 XAMPP，然后关闭了 apache php，只运行 MySQL
然后新安装了一个 Nginx 和 PHP，想调用 XAMPP 这个 MySQL，如果用 mysqli_connect 等 localhost 的时候会报这个错误。&lt;/p&gt;
&lt;p&gt;首先访问 XAMPP 的mysql&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mysql -uroot -p 
show variables like &#39;%socket%&#39;;

# 找到这个值，例如/Applications/XAMPP/xamppfiles/var/mysql/mysql.sock
# 然后编辑 /etc/php.ini
# 找到 mysqli.default_socket, 把它的值修改

killall -9 php-fpm
php-fpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;一些常见问题&#34;&gt;一些常见问题&lt;/h1&gt;
&lt;p&gt;Nginx 的默认设置缺乏，导致上传较大文件时提示&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;413 Request Entity Too Large&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Add the following line to http or server or location context to increase the size limit in nginx.conf, enter:

# set client body size to 2M #
client_max_body_size 2M;
Save and close the file. Reload the nginx webserver, enter:
# /usr/local/nginx/sbin/nginx -s reload
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-upgrade-to-php-7-on-centos-7&#34;&gt;How To Upgrade to PHP 7 on CentOS 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000000606752#articleHeader6&#34;&gt;全新安装Mac OSX 开发者环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itjiaoshou.com/os-x-install-config-work-skills&#34;&gt;OS X安装配置-工作环境搭建-使用技巧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://avnpc.com/pages/install-lnmp-on-osx&#34;&gt;Mac下安装LNMP(Nginx+PHP5.6)环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;title: 基于Linux+Nginx(Apache)+MySQL+PHP的网站优化
permalink: linux-nginx-mysql-php-apache-optimize
date: 2016/05/25 10:10:10
categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.zhishibee.com/article_images/server/linux-nginx-mysql-php/lemp_cover.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;定时打包备份网站文件数据库访问日志&#34;&gt;定时打包备份网站文件、数据库、访问日志&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/my101du/courses/tree/master/server/backup&#34;&gt;在这里下载备份脚本&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ chmod +x wwwroot_batch_backup.sh
$ chmod +x mysql_batch_backup.sh
$ chmod +x access_log_batch_backup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;一些常见问题-1&#34;&gt;一些常见问题&lt;/h1&gt;
&lt;p&gt;Nginx 的默认设置缺乏，导致上传较大文件时提示&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;413 Request Entity Too Large&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Add the following line to http or server or location context to increase the size limit in nginx.conf, enter:

# set client body size to 2M #
client_max_body_size 2M;
Save and close the file. Reload the nginx webserver, enter:
# /usr/local/nginx/sbin/nginx -s reload
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;参考资料-1&#34;&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-upgrade-to-php-7-on-centos-7&#34;&gt;How To Upgrade to PHP 7 on CentOS 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;为什么要使用最新版本的-mysql以及新旧版本数据库的环境兼容问题&#34;&gt;为什么要使用最新版本的 MySQL？以及新旧版本数据库的环境兼容问题&lt;/h1&gt;
&lt;p&gt;以前我是一个“顽固派”，认为软件的版本够用就好，没必要追求最新版，所以在 Mac 上一直用着 5.1 版本。它体积小，不占太多硬盘空间，而且启动后台服务后占用内存也才 20M 不到，非常节省资源。&lt;/p&gt;
&lt;p&gt;但是 MySQL 这个数据库不一样，最新版的会有更强大的性能（当然占用系统资源也会更多），以及更多的特性（虽然平时感觉不到），和对数据更好的兼容（毕竟现在数据比什么都重要，而且数据来源五花八门）。&lt;/p&gt;
&lt;p&gt;但就是这个平时感觉不到的东西，最近坑了我一把。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E4%BD%BF%E7%94%A8rsync%E5%92%8Clftp%E7%AD%89%E5%B7%A5%E5%85%B7%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E4%BD%BF%E7%94%A8rsync%E5%92%8Clftp%E7%AD%89%E5%B7%A5%E5%85%B7%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;title: 使用rsync和lftp等工具在服务器之间同步文件
permalink: sync-files-use-rsync-lftp
date: 2016/10/25 10:10:10
tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运维&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%95%99%E7%A8%8B%E4%B8%8E%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%95%99%E7%A8%8B%E4%B8%8E%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;p&gt;title: 几种常用虚拟机软件的教程与技巧
permalink: virtual-machine-skills
tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运维&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;虚拟机软件可以让你在一台物理机上同时运行多个操作系统。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;parallels&#34;&gt;Parallels&lt;/h1&gt;
&lt;h2 id=&#34;centos&#34;&gt;CentOS&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;安装 “tools”&lt;/strong&gt;
在菜单上选择“操作”-“安装Parallels Tools”
进入centos后，输入命令行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdimedia/cdrom
$ mount /dev/cdromedia/cdrom

# or
$mount -o exec /dev/cdromedia/cdrom
media/cdrom/install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按提示安装即可完成&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E5%8F%88%E6%8B%8D%E4%BA%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E5%8F%88%E6%8B%8D%E4%BA%91/</guid>
      <description>又拍云 共享IP的渣渣虚拟主机，主机商又不提供SSL证书安装服务，那只能通过CDN在传输过程中全站HTTPS，这种方式更简单。 以下介绍的就是使</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8C%E7%9A%84%E7%BB%88%E7%AB%AF%E5%B7%A5%E5%85%B7ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8C%E7%9A%84%E7%BB%88%E7%AB%AF%E5%B7%A5%E5%85%B7ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>title: 在浏览器里的终端工具SSH远程连接服务器 permalink: ssh-remote-server-in-browser tags: 运维 安装 shellinabox (解决端口被屏蔽的问题，在浏览器访问SSH) 443 port shellinaboxd -b -c /tmp -p 443</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E5%AE%89%E8%A3%85shadowsocks%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E5%AE%89%E8%A3%85shadowsocks%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;p&gt;title: 安装Shadowsocks服务
permalink: install-shadowsocks-server
tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shadowsocks&lt;/li&gt;
&lt;li&gt;技巧&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E5%AE%9D%E5%A1%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E5%AE%9D%E5%A1%94/</guid>
      <description>宝塔 https://www.bt.cn/bbs/thread-19376-1-1.html 安装 yum install -y wget &amp;amp;&amp;amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;amp;&amp;amp; bash install.sh 新机器大概2分钟 为了安全，默认的面板地址是一个8位的编码，账号和密码也要记下来 需要打开阿里云等的安全组，允</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E6%90%AD%E5%BB%BA-ngrok-%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%9A%84%E7%BD%91%E7%AB%99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E6%90%AD%E5%BB%BA-ngrok-%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E7%9A%84%E7%BD%91%E7%AB%99/</guid>
      <description>title: 搭建 ngrok 服务实现外网访问局域网内的网站 permalink: ngrok-access-website-in-lan tags: 运维 一般情况下，家庭用户使用的电信宽带服务是没有固定 IP 的，某些企业客户即使给分配了一个固定 IP 也不</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%91%E6%8E%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%91%E6%8E%A7/</guid>
      <description>&lt;p&gt;title: 服务器监控
permalink: monitor-server
date: 2016/03/05 10:10:10
tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运维&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E8%85%BE%E8%AE%AF%E4%BA%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E8%85%BE%E8%AE%AF%E4%BA%91/</guid>
      <description>腾讯云 密钥 https://cloud.tencent.com/document/product/213/16691 创建新密钥对 输入名称，下载 使用已有公钥（原有公钥信息） 为实例加载密钥 自动进行绑定 登录不再需要输入密码</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E8%87%AA%E8%90%A5vps%E5%A4%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E8%87%AA%E8%90%A5vps%E5%A4%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</guid>
      <description>title: 自营vps多用户管理 permalink: vps-hosting-multi-users tags: server 一键包 &amp;amp; 面板 Lnmp 一键包 安装很慢，升级不便（据说编译安装对本机配置进行优化？） http://forum.ubuntu.org.cn/viewtopic.php?t=247502 是否 lnmp 一键包 省空间一点？ 1.2G -&amp;gt; 1.6G 现在</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E8%B4%AD%E4%B9%B0%E6%80%A7%E4%BB%B7%E6%AF%94%E9%AB%98%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%BF%E9%87%8C%E4%BA%91%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E8%B4%AD%E4%B9%B0%E6%80%A7%E4%BB%B7%E6%AF%94%E9%AB%98%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%BF%E9%87%8C%E4%BA%91%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
      <description>title: 购买性价比高的服务器&amp;amp;阿里云使用教程 permalink: how-to-buy-server-aliyun date: 2016/03/05 10:10:10 tags: 运维 任何一个网站或服务都是运行在互联网上一台服务器上的。服务器的运行最重要的是稳定</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%8A%E4%BD%BF%E7%94%A8-ddns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%8A%E4%BD%BF%E7%94%A8-ddns/</guid>
      <description>&lt;p&gt;title: 路由器上使用 DDNS
permalink: ddns-in-router
tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E9%98%BF%E9%87%8C%E4%BA%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E9%98%BF%E9%87%8C%E4%BA%91/</guid>
      <description>阿里云 挂载云磁盘 挂载磁盘 首先在阿里云面板里把云磁盘挂载上去 进入 Linux 查看磁盘， 一般系统盘是dev、xvda, 云磁盘是dev/xvd开头 fdisk -l 这一步</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/adobe-%E5%85%8D%E8%B4%B9%E7%9A%84%E4%BA%A7%E5%93%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/adobe-%E5%85%8D%E8%B4%B9%E7%9A%84%E4%BA%A7%E5%93%81/</guid>
      <description>title: Adobe 免费的产品 permalink: adobe-free-product tags: play Creative Cloud 订阅中包含的一款免费产品，先订阅。 从免费试用版进行升级 Creative Cloud - 摄影 US$9.99/月 Creative Cloud - 所有应用程序 US$52.9</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/api-%E6%96%87%E6%A1%A3%E4%B8%8E%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/api-%E6%96%87%E6%A1%A3%E4%B8%8E%E5%B7%A5%E5%85%B7/</guid>
      <description>title: API 文档与工具 permalink: api-doc-tools tags: skill 讨论 https://www.v2ex.com/t/472126?p=2 清单 APIJSONAuto 从数据表定义得到（关联呢？） APIDOC （直接写在函数上面） Swagger （自己根据格式写） postman (边测试完直接发布) showdoc apizza http://www.sphinx-doc.org/en/master/ 需求 api 数</description>
    </item>
    
  </channel>
</rss>
