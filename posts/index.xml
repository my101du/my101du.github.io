<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compose Docs on my101du Blog</title>
    <link>http://blog.zhishibee.com/posts/</link>
    <description>Recent content in Compose Docs on my101du Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    
        <atom:link href="http://blog.zhishibee.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://blog.zhishibee.com/about/</link>
      <pubDate>Tue, 07 Aug 2018 16:11:36 +0800</pubDate>
      
      <guid>http://blog.zhishibee.com/about/</guid>
      <description>正文内容</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</guid>
      <description>https://adrianmejia.com/data-structures-for-beginners-trees-binary-search-tree-tutorial/ https://zhuanlan.zhihu.com/p/35221776 https://css-tricks.com/how-to-modify-nodes-in-an-abstract-syntax-tree/ 树 二叉树 转换 遍历等 js 的“树” 库 https://github.com/joaonuno/tree-model-js demo 与图形演示： http://jnuno.com/tree-model-js/ 有 查找node, 查找path 等等。。。。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/bootstrap-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%B8%8E%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/bootstrap-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%B8%8E%E6%8A%80%E5%B7%A7/</guid>
      <description>html5 模板 &amp;lt;!doctype html&amp;gt; &amp;lt;html class=&amp;quot;no-js&amp;quot; lang=&amp;quot;&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;manifest&amp;quot; href=&amp;quot;site.webmanifest&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;apple-touch-icon&amp;quot; href=&amp;quot;icon.png&amp;quot;&amp;gt; &amp;lt;!-- Place favicon.ico in the root directory --&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/normalize.css&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/main.css&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;theme-color&amp;quot; content=&amp;quot;#fafafa&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;!-- Add your site or application content here --&amp;gt; &amp;lt;p&amp;gt;Hello world! This is HTML5 Boilerplate.&amp;lt;/p&amp;gt; &amp;lt;script src=&amp;quot;js/vendor/modernizr-3.10.0.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.5.0.min.js&amp;quot; integrity=&amp;quot;sha256-xNzN2a4ltkB44Mc/Jz3pT4iU1cmeR0FkXs4pru/JxaQ=&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;window.jQuery || document.write(&#39;&amp;lt;script src=&amp;quot;js/vendor/jquery-3.5.0.min.js&amp;quot;&amp;gt;&amp;lt;\/script&amp;gt;&#39;)&amp;lt;/script&amp;gt; &amp;lt;script</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/bootstrap4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/bootstrap4/</guid>
      <description>title: bootstrap4 permalink: bootstrap4 tags: frontend 可以在 sublime 安装 bootstrap4-snippet 通过输入 b4tem 自动弹出模板选择， 然后修改里面的路径（默认是国外的 CDN），这里改成中国的 bootcss.com， 或本地</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/css-%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/css-%E5%8A%A8%E7%94%BB/</guid>
      <description>title: CSS 动画 permalink: CSS-animation tags: css 定义关键帧序列 @keyframes logo-jump { 0% {left: 0px;margin-top:0px;-webkit-transform:rotate(0deg);} 50% {left: 0px;margin-top:100px;} 100% {left: 0px;margin-top:0px;-webkit-transform:rotate(360deg);} } @-webkit-keyframes logo-jump { 0% {left: 0px;margin-top:0px;-webkit-transform:rotate(0deg);} 50% {left: 0px;margin-top:100px;} 100% {left: 0px;margin-top:0px;-webkit-transform:rotate(360deg);} } 为元素绑定动画/关键帧 #fade img{ animation: 5s logo-jump infinite; -moz-animation: logo-jump 5s; /* Firefox */ -webkit-animation: logo-jump 5s infinite; /* Safari</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/css-%E5%8A%A8%E7%94%BB%E5%BA%93-animate.css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/css-%E5%8A%A8%E7%94%BB%E5%BA%93-animate.css/</guid>
      <description>title: CSS 动画库 Animate.css permalink: animate-css tags: css animate https://daneden.github.io/animate.css/ 自己写 CSS3 动画，不仅代码复杂，而且非常消耗时间。 步骤 Add the class animated to the element you want to animate. You may also want to include the class infinite for an infinite loop. 然后添加各种 class name 来</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/css-%E9%97%AE%E9%A2%98%E6%90%9C%E7%B4%A2%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/css-%E9%97%AE%E9%A2%98%E6%90%9C%E7%B4%A2%E8%AE%B0%E5%BD%95/</guid>
      <description>title: CSS 问题搜索记录 permalink: CSS-useful-tips tags: 前端 文本旋转 右边最后一个文本逆时针转 .n-item-sequence h2{ -moz-transform:rotate(-90deg); -moz-transform-origin: bottom right; -webkit-transform: rotate(-90deg); -webkit-transform-origin: bottom right; -o-transform: rotate(-90deg); -o-transform-origin: bottom right; filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1); } 右边最后一个文本顺时针转 .n-item-sequence h2{ -moz-transform:rotate(90deg); -moz-transform-origin: bottom left; -webkit-transform: rotate(90deg); -webkit-transform-origin: bottom</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/css%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/css%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;p&gt;title: CSS教程
permalink: css-study
tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/scss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/scss/</guid>
      <description>SCSS 有各种好处，使用 SCSS 处理器将它转成 CSS 编写 scss 样式文件 从例子来学习, 创建目录和文件 styles base.scss iconfont.scss mixin.scss 首先看 base.scss /*导入外部文件*/ @import &amp;quot;./mixin&amp;quot;; @import &amp;quot;./iconfont&amp;quot;; /*这些都和 CSS 标准</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/w2ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/w2ui/</guid>
      <description>https://github.com/vitmalina/w2ui 基本demo http://w2ui.com/web/demo 更完整的 demo 列表(包括在工作中用到的 master/detail 双 grid， 行内编辑等) http://w2ui.com/web/demos/#!grid/grid-18 Layout Grid Toolbar Tree Tabs Popup Forms Fields Utilitis example 这里是个 Grid 的案例，非常容易理解， 定义表头（</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/%E6%9C%80%E5%A5%BD%E6%87%82%E7%9A%84-bootstrap-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/%E6%9C%80%E5%A5%BD%E6%87%82%E7%9A%84-bootstrap-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%E6%95%99%E7%A8%8B/</guid>
      <description>title: 最好懂的 Bootstrap 实战案例教程 permalink: study-bootstrap tags: 前端 我们在开发前端页面的时候，如果每一个按钮、样式、处理浏览器兼容性的代码都要自己从零开始去写，那就太浪费时间</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/electron-%E8%B7%A8%E5%B9%B3%E5%8F%B0-gui-%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/electron-%E8%B7%A8%E5%B9%B3%E5%8F%B0-gui-%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</guid>
      <description>title: Electron 跨平台 GUI 应用开发 permalink: electron-cross-platform-gui-application tags: frontend 快速开始 # 克隆示例项目的仓库 $ git clone https://github.com/electron/electron-quick-start # 进入这个仓库 $ cd electron-quick-start # 安装依赖并运行 $ npm install &amp;amp;&amp;amp; npm start 文件说明 package.json 里关键的有几个 &amp;quot;main&amp;quot;: &amp;quot;main.js&amp;quot;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/async/</guid>
      <description>title: async permalink: javascript-async-promise tags: javascript 前端 搞清楚异步 在迭代函数上绑定自定义参数 http://stackoverflow.com/questions/16990160/how-do-you-pass-an-argument-to-the-iterator-function-for-async-each 注意，map 每次操作会继续执行（err, results），而 each/eachSeries 的迭代函数，只要得到错误</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/backbone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/backbone/</guid>
      <description>简介 基于 underscore, javascript MVC框架，使我们可以像高级语言一样定义类、类属性及方法，更好的组织代码并按框架提供的数据逻辑分离方法，减少代码混乱。 总之，这玩</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/es6es2015/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/es6es2015/</guid>
      <description>title: ES6(ES2015) permalink: javascript-es6 tags: javascript 语法 可计算属性名称（数组元素的 key 被中括号包裹） https://stackoverflow.com/questions/32515598/square-brackets-javascript-object-key var a = &amp;quot;b&amp;quot; var c = {[a]: &amp;quot;d&amp;quot;} // c = {b: &amp;quot;d&amp;quot;} // 是下面写法的语法糖 var a = &amp;quot;b&amp;quot; var c = {} c[a] = &amp;quot;d&amp;quot; // c = {b: &amp;quot;d&amp;quot;}</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/es6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/es6/</guid>
      <description>title: ES6 permalink: javascript-ES6 tags: frontend IE 的 polyfill 对于一些 IE 版本，并不支持 ES6 语法，需要使用一些 polyfill, 如 core-js let 等关键词 箭头函数 一些疑问 用 const 定义函数 const foo = ()=&amp;gt;{ } 它能运行，但有什么问题吗</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/flow-%E5%92%8C-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/flow-%E5%92%8C-typescript/</guid>
      <description>title: Flow 和 TypeScript permalink: flow-and-typescript tags: foreground Flow yarn add --dev babel-cli babel-preset-flow create a .babelrc file at the root of your project with &amp;ldquo;flow&amp;rdquo; in your &amp;ldquo;presets&amp;rdquo;. { &amp;quot;presets&amp;quot;: [&amp;quot;flow&amp;quot;] } TypeScript 侵入性太强了。。。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/javascript%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%BA%9B%E9%A1%B5%E9%9D%A2%E7%89%B9%E6%95%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/javascript%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%BA%9B%E9%A1%B5%E9%9D%A2%E7%89%B9%E6%95%88/</guid>
      <description>title: JavaScript实现一些页面特效 permalink: javascript-page-effects Page Process 页面加载效果 http://github.hubspot.com/pace/docs/welcome/ Modal https://github.com/kylefox/jquery-modal</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/javascript%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/javascript%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</guid>
      <description>&lt;p&gt;title: javascript常用代码片段
permalink: javascript-snippet
tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;收集一些常用的 JavaScript/jQuery 代码片段&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;使用-cdn-加载外部-jquery在网络故障的时候使用本地-jquery-文件&#34;&gt;使用 CDN 加载外部 jQuery，在网络故障的时候使用本地 jQuery 文件&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (typeof jQuery == &#39;undefined&#39;) { 
	document.write(unescape(&amp;quot;%3Cscript src=&#39;http://blog.zhishibee.com/js/jquery.min.js&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&amp;quot;)); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;系统交互&#34;&gt;系统交互&lt;/h1&gt;
&lt;h2 id=&#34;拷贝到剪贴板&#34;&gt;拷贝到剪贴板&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhangxinxu.com/wordpress/2018/09/js-clipboard-api-paste-input/&#34;&gt;https://www.zhangxinxu.com/wordpress/2018/09/js-clipboard-api-paste-input/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第三方库  clipboard.js&lt;/p&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;p&gt;原生 document.execCommand()方法   允许运行命令来操作可编辑区域的内容，注意，是可编辑区域。（意味着除了 &lt;!-- raw HTML omitted --&gt;、&lt;!-- raw HTML omitted --&gt; 这样的输入域以外，是无法使用这个方法的。）
问题： 不兼容 IE11 以下   需要 input 无法直接复制文本&lt;/p&gt;
&lt;p&gt;如果是一个按钮呢？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const btn = document.querySelector(&#39;#btn&#39;);
btn.addEventListener(&#39;click&#39;,() =&amp;gt; {
    const input = document.createElement(&#39;input&#39;);
    document.body.appendChild(input);
    input.setAttribute(&#39;value&#39;, &#39;听说你想复制我&#39;);

    //解决 iOS 下弹出键盘问题：代码中添加 
    //input.setAttribute(&#39;readonly&#39;, &#39;readonly&#39;); 使这个 &amp;lt;input&amp;gt; 是只读的，就不会拉起键盘了。
    //input.setSelectionRange(0, 9999); 并没有选中全部内容，我们需要使用另一个方法来选中内容

    input.select();
    
    if (document.execCommand(&#39;copy&#39;)) {
        document.execCommand(&#39;copy&#39;);
        console.log(&#39;复制成功&#39;);
    }
    document.body.removeChild(input);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;写成一个方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**
 * 一键粘贴
 * @param  {String} id [需要粘贴的内容]
 * @param  {String} attr [需要 copy 的属性，默认是 innerText，主要用途例如赋值 a 标签上的 href 链接]
 *
 * range + selection
 *
 * 1.创建一个 range
 * 2.把内容放入 range
 * 3.把 range 放入 selection
 *
 * 注意：参数 attr 不能是自定义属性
 * 注意：对于 user-select: none 的元素无效
 * 注意：当 id 为 false 且 attr 不会空，会直接复制 attr 的内容
 */
copy (id, attr) {
    let target = null;

    if (attr) {
        target = document.createElement(&#39;div&#39;);
        target.id = &#39;tempTarget&#39;;
        target.style.opacity = &#39;0&#39;;
        if (id) {
            let curNode = document.querySelector(&#39;#&#39; + id);
            target.innerText = curNode[attr];
        } else {
            target.innerText = attr;
        }
        document.body.appendChild(target);
    } else {
        target = document.querySelector(&#39;#&#39; + id);
    }

    try {
        let range = document.createRange();
        range.selectNode(target);
        window.getSelection().removeAllRanges();
        window.getSelection().addRange(range);
        document.execCommand(&#39;copy&#39;);
        window.getSelection().removeAllRanges();
        console.log(&#39;复制成功&#39;)
    } catch (e) {
        console.log(&#39;复制失败&#39;)
    }

    if (attr) {
        // remove temp target
        target.parentElement.removeChild(target);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;copy 事件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;document.addEventListener(&#39;copy&#39;, function (event) {
    var clipboardData = event.clipboardData || window.clipboardData;
    if (!clipboardData) { return; }
    var text = window.getSelection().toString();
    if (text) {
        event.preventDefault();
        clipboardData.setData(&#39;text/plain&#39;, text + &#39;\n\n鑫空间版权所有&#39;);
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;剪贴板粘贴&#34;&gt;剪贴板粘贴&lt;/h2&gt;
&lt;h1 id=&#34;数组&#34;&gt;数组&lt;/h1&gt;
&lt;h2 id=&#34;js-数组-foreach-里--没有-continue--应该用--return-true-实现&#34;&gt;js 数组 forEach 里  没有 continue.  应该用  return true 实现;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;arr = [1, 2, 3, 4]

total = 0;
arr.forEach(function(e) {
    if(e == 2) {
        return true;
    }
    total += e;

});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;filtermapreduce&#34;&gt;filter/map/reduce&lt;/h2&gt;
&lt;p&gt;reduce((sum, val)=&amp;gt;{return num;}, initSum) 实现统计总数， 案例，学生里男生总数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;boyCount = [{&#39;id&#39;: 1, &#39;gender&#39;: &#39;boy&#39;},{&#39;id&#39;: 2, &#39;gender&#39;: &#39;girl&#39;},{&#39;id&#39;: 2, &#39;gender&#39;: &#39;boy&#39;}].reduce(function(sum, rec){
    if(rec.gender == &#39;boy&#39;) return sum+1;
}, 0);

// 得到 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;删除元素&#34;&gt;删除元素&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://love2dev.com/blog/javascript-remove-from-array/&#34;&gt;https://love2dev.com/blog/javascript-remove-from-array/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pop 删除最后一个&lt;/p&gt;
&lt;p&gt;splice&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var a = [1,2,3,4,5,6]

// 如果赋值给另外一个数组，那这个数组就是删除的 [4,5]
var b = a.splice(a.indexOf(4), 2);

// 此时 a 剩下 [1,2,3,6]
console.log(a); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;loadash 的方法。。 remove&lt;/p&gt;
&lt;p&gt;filter 方法&lt;/p&gt;
&lt;h2 id=&#34;数组有多个对象按对象某个属性排序&#34;&gt;数组有多个对象，按对象某个属性排序&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value-in-javascript&#34;&gt;https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value-in-javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最基本的，&lt;code&gt;sort&lt;/code&gt;函数使用自定义的对比方法，这个只能按一个属性来排&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[
    {id: 1, age: 12, height: 180}, 
    {id: 2, age: 34, height: 170},
    {id: 3, age: 32, height: 160}
].sort((a, b) =&amp;gt; (a.age &amp;lt; b.age ? -1 : 1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要依次按几个属性来排序&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function dynamicSortMultiple() {
    /*
     * save the arguments object as it will be overwritten
     * note that arguments object is an array-like object
     * consisting of the names of the properties to sort by
     */
    var props = arguments;
    return function (obj1, obj2) {
        var i = 0, result = 0, numberOfProperties = props.length;
        /* try getting a different result from 0 (equal)
         * as long as we have extra properties to compare
         */
        while(result === 0 &amp;amp;&amp;amp; i &amp;lt; numberOfProperties) {
            result = dynamicSort(props[i])(obj1, obj2);
            i++;
        }
        return result;
    }
}

var People = [
    {Name: &amp;quot;Name&amp;quot;, Surname: &amp;quot;Surname&amp;quot;},
    {Name:&amp;quot;AAA&amp;quot;, Surname:&amp;quot;ZZZ&amp;quot;},
    {Name: &amp;quot;Name&amp;quot;, Surname: &amp;quot;AAA&amp;quot;}
];

People.sort(dynamicSort(&amp;quot;Surname&amp;quot;));
People.sort(dynamicSort(&amp;quot;-Surname&amp;quot;));

People.sort(dynamicSortMultiple(&amp;quot;Name&amp;quot;, &amp;quot;-Surname&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按字母顺序排&lt;/p&gt;
&lt;h2 id=&#34;delete-某个数组元素后重排索引&#34;&gt;delete 某个数组元素后，重排索引&lt;/h2&gt;
&lt;p&gt;例如  arr = [&amp;lsquo;a&amp;rsquo;, &amp;lsquo;b&amp;rsquo;, &amp;lsquo;c&amp;rsquo;, &amp;lsquo;d&amp;rsquo;, &amp;lsquo;e&amp;rsquo;]&lt;/p&gt;
&lt;p&gt;delete(arr[2])后， 打印 arr&lt;/p&gt;
&lt;p&gt;[&amp;lsquo;a&amp;rsquo;, &amp;lsquo;b&amp;rsquo;, empty, &amp;lsquo;d&amp;rsquo;, &amp;lsquo;e&amp;rsquo;]&lt;/p&gt;
&lt;p&gt;被删掉的元素，还占着索引 2 不走。。 导致 d e 的索引数没能按预期往前挪&lt;/p&gt;
&lt;p&gt;用这个方式可以自动清理掉被删除元素的索引&lt;/p&gt;
&lt;p&gt;arr.splice(2, 1)  打印后就是 [&amp;lsquo;a&amp;rsquo;, &amp;lsquo;b&amp;rsquo;, &amp;lsquo;d&amp;rsquo;, &amp;lsquo;e&amp;rsquo;]  索引按 0 1 2 3 重新排了&lt;/p&gt;
&lt;p&gt;还有资料&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/4759745/javascript-reindexing-an-array&#34;&gt;https://stackoverflow.com/questions/4759745/javascript-reindexing-an-array&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;如果用-underscore-就更容易了&#34;&gt;如果用 underscore 就更容易了&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var objs = [ 
  { first_nom: &#39;Lazslo&#39;,last_nom: &#39;Jamf&#39; },
  { first_nom: &#39;Pig&#39;, last_nom: &#39;Bodine&#39;  },
  { first_nom: &#39;Pirate&#39;, last_nom: &#39;Prentice&#39; }
];

var sortedObjs = _.sortBy( objs, &#39;first_nom&#39; );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但这样如果对象有 key，排序后会丢失 key( 变成数组)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var   = {
    &#39;aaa&#39;: {name: &#39;zhang&#39;, age: 12},
    &#39;bbb&#39;: {name: &#39;li&#39;, age: 15},
}

var sortedObjs = _.sortBy( objs, &#39;name&#39; );

// return
[
{name: &#39;li&#39;, age:15},
{name: &#39;zhang&#39;, age:12}
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要通过 key 找到某个元素，还是可以去原来那个对象里去找的，如&lt;code&gt;objs[&#39;aaa&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;事件&#34;&gt;事件&lt;/h1&gt;
&lt;h2 id=&#34;增加一个自定义事件并触发&#34;&gt;增加一个自定义事件并触发&lt;/h2&gt;
&lt;p&gt;定义 event handler&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(o).on(&#39;my-awesome-event&#39;, function(event){ ... });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要触发这个 event&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(o).trigger(&#39;my-awesome-event&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关闭监听器?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(o).off(&#39;my-awesome-event&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用 jQuery 在原有的事件监听器 后面 再添加一个事件监听器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// 不影响之前绑定的, 在之前的 事件发生之 后。
$( o ).bind( &amp;quot;show&amp;quot;, function() {} );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要发生之前呢？ 下面的方法报错了。。。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$.fn.preBind = function(type, data, fn) {
  this.bind(type, data, fn);

  var currentBindings = this.data(&#39;events&#39;)[type];  // 但是这里报错了！！！ data(&#39;event&#39;) Cannot read property &#39;click&#39; of undefined

  var currentBindingsLastIndex = currentBindings.length - 1;

  var newBindings = [];

  newBindings.push(currentBindings[currentBindingsLastIndex]);

  $.each(currentBindings, function (index) {
    if (index &amp;lt; currentBindingsLastIndex)
      newBindings.push(this);
  });

  this.data(&#39;events&#39;)[type] = newBindings;

  return this;
};

$(&#39;#button&#39;).preBind(&#39;click&#39;, function() {
  console.log(&#39;hello&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另一个， Boss 写的， Form 里面对 openPicklist 之前手动 trigger 事件。。。。（不改造 click ，只是在需要的时候添加一些特殊的事件）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$.fn.cgbForm = function (options) {

    var $selector = $(this);
    var triggerEvent = {}; 

    //在 start() 里对 triggerEvent 扩充了一些 .info = ...

    function openPicklist(target, runPrePicklist) {

        // 一些数据初始化
        options = {model: info[target].model,
            title: info[target].title,
            sel_id: getItemPLCode(target)};

        if (info[target].relid != undefined) {
            options.relation = {id: info[target].relcode, idwhere: info[target].relid};
        }

        options.plCallBack = afterPickList;

        plOpenId = target;

        // 如果要调用 &amp;quot;pre&amp;quot; picklist， 拦截
        if (runPrePicklist == undefined) {
            runPrePicklist = true;
        }

        if (runPrePicklist) {
            // 一些要传回去的数据。 例如 id 就是表示哪个按钮被点了
            var ev = {id: target, options: options, fielddata: info[target], pk: codePK}

            // 把事件有有关的数据与刚要传过去的 合并， 以及 
            // $.Event(&#39;prepicklist&#39;) 来自 jQuery 代码4964行，`function( src, props )`  得到 this.isDefaultPrevented    以及 this.type = src.type;
            $.extend(ev, $.Event(&#39;prepicklist&#39;), triggerEvent);

            // selector 这里就是 Form ,调用 trigger() 并传入 ev 参数 
            $selector.trigger(ev);

            // 如果执行完毕了，继续后面
            if (ev.isDefaultPrevented()) {
                return;
            }
        }

        // 这是本来要操作的， 这个方法里调用 ajax 等
        basicPickListOpen(options);
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;prepicklist 事件监听&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&#39;#formComment&#39;).on(&#39;prepicklist&#39;, function (ev) {
    if (ev.fielddata.codefield == &#39;cd_project_power_type&#39;) {
    }

});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因此要实现 click 注入，简化下更容易理解&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;button class=&amp;quot;btn&amp;quot; data-name=&amp;quot;btnName&amp;quot;&amp;gt;click&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;给一个 click 事件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&#39;.btn&#39;).on(&#39;click&#39;, function(e){

    ev = e
    $.extend(ev, $.Event(&#39;preclick&#39;), {});

    //直接用 window 好了   触发事件。  等下在后面有  $(window).on(&#39;preclick&#39;, function(ev)) 去监听它并作出响应
    $(window).trigger(ev);

    if (ev.isDefaultPrevented()) {
        return;
    }

    console.log(&#39;clicked&#39;)
});


$(window).on(&#39;preclick&#39;,function(ev){
    console.log(&#39;preclick&#39;)

    // 某些情况下，终止后面的执行。
    if(ev.name = &#39;aaa&#39;) {
        ev.preventDefault();
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;动态修改已绑定的-event-handler&#34;&gt;动态修改已绑定的 event handler&lt;/h2&gt;
&lt;p&gt;？&lt;/p&gt;
&lt;h2 id=&#34;已绑定-click-事件移除它然后用另外一个替代&#34;&gt;已绑定 click 事件，移除它，然后用另外一个替代&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;document.getElementById(&amp;quot;test&amp;quot;).addEventListener(&#39;click&#39;, first);

function first(e){
    e.stopImmediatePropagation();
    this.removeEventListener(&amp;quot;click&amp;quot;, first);
    document.onclick = second;
}
function second(){
    alert(&amp;quot;I&#39;m not suppose to appear after the first click, only the second.&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;button type=&amp;quot;button&amp;quot; id=&amp;quot;test&amp;quot;&amp;gt;Click&amp;lt;/button&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;使用jquery批量填充表单元素的值&#34;&gt;使用jQuery批量填充表单元素的值&lt;/h1&gt;
&lt;p&gt;网上资料：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhishibee.com/1/01/javascript%E9%97%AE%E9%A2%98%E6%90%9C%E7%B4%A2%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhishibee.com/1/01/javascript%E9%97%AE%E9%A2%98%E6%90%9C%E7%B4%A2%E8%AE%B0%E5%BD%95/</guid>
      <description>title: javascript问题搜索记录 permalink: javascript-search-resulst-records tags: javascript 找到当前页面所有对象 for(var b in window) { if(window.hasOwnProperty(b)) console.log(b); } 检查两个对象/数组是否相同 http://stackoverflow.com/questions/8672383/how-to-use-underscores-intersection-on-objects // check object equal, must assgin to another variable // https://stackoverflow.com/questions/201183/how-to-determine-equality-for-two-javascript-objects var temp = variation.attributes if(temp ===</description>
    </item>
    
  </channel>
</rss>
