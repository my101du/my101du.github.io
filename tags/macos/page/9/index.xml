<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>macos on my101du Blog</title>
    <link>https://my101du.github.io/tags/macos/</link>
    <description>Recent content in macos on my101du Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    
        <atom:link href="https://my101du.github.io/tags/macos/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Premiere视频剪辑教程</title>
      <link>https://my101du.github.io/1/01/premiere-study/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/premiere-study/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PSR-7</title>
      <link>https://my101du.github.io/1/01/psr-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/psr-7/</guid>
      <description>PSR-7 https://www.php-fig.org/psr/psr-7/</description>
    </item>
    
    <item>
      <title>puppeteer-友好的Headless Chrome Node API</title>
      <link>https://my101du.github.io/1/01/putteteer-headless-chrome-node-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/putteteer-headless-chrome-node-api/</guid>
      <description>Chrome 团队出品的一款更友好的Headless Chrome Node API，用于代替用户在页面上面点击、拖拽、输入等多种操作，常见的使用场景还是应用到 UI自动化测试</description>
    </item>
    
    <item>
      <title>pusher</title>
      <link>https://my101du.github.io/1/01/pusher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/pusher/</guid>
      <description>pusher https://hackernoon.com/create-web-notifications-using-laravel-and-pusher-channels-a9516427d842</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://my101du.github.io/1/01/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/python/</guid>
      <description>Python 文档来源 廖雪峰 https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319098638265527beb24f7840aa97de564ccc7f20f6000 CookBook (上面的那个，入门快，但是不完整，例如没有说“接口”) https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p12_define_interface_or_abstract_base_class.html 安装 centos sudo yum install centos-release-scl # 最新版 https://www.python.org/downloads/ 好像一直失败。。。。（也有可能是代理服务</description>
    </item>
    
    <item>
      <title>python高级特性</title>
      <link>https://my101du.github.io/1/01/python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</guid>
      <description>python高级特性 切片 取一个list或tuple的部分元素 (直接用自带的 Slice 操作符，而不是循环) 对 list 切片 &amp;gt;&amp;gt;&amp;gt; L = [&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;, &#39;Bob&#39;, &#39;Jack&#39;] # 第一个索引是0, 可</description>
    </item>
    
    <item>
      <title>QNAP NAS 应用开发</title>
      <link>https://my101du.github.io/1/01/qnap-nas-develop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/qnap-nas-develop/</guid>
      <description>https://www.qnap.com/event/dev/en/p_about.php 分为 Development Toolkit (API &amp;amp; SDK): 第三方web/移动应用连接到 NAS NAS App (QPKG) Development: 运行在 NAS 上（app center） VM Integration: Client Development Kit QDK (API &amp;amp; SDK) develop a computer or mobile application (App) - PC / Mobile QDK https://www.qnap.com/event/dev/en/p_qdk.php#qdk_btn2_show NAS App (QPKG) - NAS</description>
    </item>
    
    <item>
      <title>quicklook</title>
      <link>https://my101du.github.io/1/01/quicklook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/quicklook/</guid>
      <description>https://github.com/QL-Win/QuickLook/wiki/Available-Plugins</description>
    </item>
    
    <item>
      <title>react hooks</title>
      <link>https://my101du.github.io/1/01/react-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-hooks/</guid>
      <description>关于 Hook React 16.7.0-alpha 版本推出的新特性 React Hooks 要解决的问题是状态共享，是继 render-props 和 higher-order components 之后的第三种状态共享方案，不会产生 JSX 嵌套地狱问题。 状态共享可能描述的不恰当</description>
    </item>
    
    <item>
      <title>React Native 支持</title>
      <link>https://my101du.github.io/1/01/react-native-%E6%94%AF%E6%8C%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-native-%E6%94%AF%E6%8C%81/</guid>
      <description>React Native 支持（Expo） 基于 Expo，因此 不支持 需要自定义原生组件 的第三方库 Expo 包含 Expo SDK (一个 native-and-JS 库), 不需要使用 Xcode 或 Android Studio，也不需要编写任</description>
    </item>
    
    <item>
      <title>React Native跨平台应用开发教程</title>
      <link>https://my101du.github.io/1/01/react-native-cross-platform-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-native-cross-platform-app/</guid>
      <description>Basics 快速熟悉代码 import React, { Component } from &#39;react&#39;; import { Text, View } from &#39;react-native&#39;; export default class HelloWorldApp extends Component { render() { return ( &amp;lt;View&amp;gt; &amp;lt;Text&amp;gt;Hello world!&amp;lt;/Text&amp;gt; &amp;lt;/View&amp;gt; ); } } 创建项目 有两种方式： react-native-cli Expo (推荐) # react-native-cli $npm -i -g create-react-native-app $create-react-native-app my-app $cd my-app $yarn start # expo-cli expo</description>
    </item>
    
    <item>
      <title>react router(4)</title>
      <link>https://my101du.github.io/1/01/react-router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-router/</guid>
      <description>Understand these nouns: Router(BrowserRouter or HistoryRouter) Swtich Route Link Redirect withRouter Sample: import { BrowserRouter as Router, Switch, Route, Redirect, withRouter } from &#39;react-router-dom&#39;; import TestComponent from &#39;./TestComponent&#39; @withRouter export default class App extends React.Component { //... return ( &amp;lt;div&amp;gt; &amp;lt;Link to=&amp;quot;/test&amp;quot;&amp;gt;test&amp;lt;/Link&amp;gt; &amp;lt;Router&amp;gt; &amp;lt;Switch&amp;gt; &amp;lt;Route path=&amp;quot;/&amp;quot; exact component={Dashboard} /&amp;gt; &amp;lt;Route path=&amp;quot;/test&amp;quot; exact component={Test} /&amp;gt; &amp;lt;Redirect from=&amp;quot;/accounts&amp;quot; to=&amp;quot;/users&amp;quot; /&amp;gt; &amp;lt;Route component={NoMatch} /&amp;gt; &amp;lt;/Switch&amp;gt; &amp;lt;/Router&amp;gt; &amp;lt;/div&amp;gt; 没有通过验证</description>
    </item>
    
    <item>
      <title>React 常见问题与技巧</title>
      <link>https://my101du.github.io/1/01/react-problem-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-problem-tips/</guid>
      <description>常见问题 Element type is invalid: expected a string(for build-in components) or a class/function&amp;hellip; 命令行创建组件 https://www.npmjs.com/package/react-create react-create component Home --entry 其他 https://www.npmjs.com/package/react.cli &amp;hellip; 在 React 里读取配置参数 使用 axios 等网络请求时，需要一个 “root url”， 这个地址是</description>
    </item>
    
    <item>
      <title>React 的 render props</title>
      <link>https://my101du.github.io/1/01/react-%E7%9A%84-render-props/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-%E7%9A%84-render-props/</guid>
      <description>React 的 render props React 16+ render props是一个组件间共享代码逻辑的小技巧, 通过props传递函数来实现。有许多库(比如React Router, React Motion)都使用了这</description>
    </item>
    
    <item>
      <title>React 的 UI 组件库</title>
      <link>https://my101du.github.io/1/01/react-ui-library/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-ui-library/</guid>
      <description>Material UI(1.x) 安装与使用 npm install --save @material-ui/core 如果用 cdn 方式 &amp;lt;script src=&amp;quot;https://unpkg.com/@material-ui/core/umd/material-ui.production.min.js&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 引入 Roboto 字体 &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500&amp;quot;&amp;gt; 开始使用 import React from &#39;react&#39;; import Button from &#39;@material-ui/core/Button&#39;; const App = () =&amp;gt; ( &amp;lt;Button variant=&amp;quot;contained&amp;quot; color=&amp;quot;primary&amp;quot;&amp;gt; Hello World &amp;lt;/Button&amp;gt; ); 使用自定义颜色 // custom theme import MuiThemeProvider from &amp;quot;material-ui/styles/MuiThemeProvider&amp;quot;; import createPalette from</description>
    </item>
    
    <item>
      <title>react 网络请求与返回值处理</title>
      <link>https://my101du.github.io/1/01/react-network-request-and-response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-network-request-and-response/</guid>
      <description>使用 Axios 或 Fetch, 替代 jQuery 的 ajax 请求 封装 axios request, 简化 get/post/put 方法的代码，以及让异常消息更可读, 返回 Promise 对象 首先 import axios 库 然后设置一些默认参数，例如超时、请求头、基本 URL 等</description>
    </item>
    
    <item>
      <title>ReactJS 案例学习</title>
      <link>https://my101du.github.io/1/01/react-js-case-study/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-js-case-study/</guid>
      <description>学完基础，做个 todo。还是有一些不够清晰的地方。 以及开发辅助工具的使用 还有对页面、组件的规划，代码习惯等等 React 全家桶 https://blog.csdn.net/column/details/14545.html react react-router redux react-redux react-router-redux redux-saga immutable reselect antd 首先</description>
    </item>
    
    <item>
      <title>reactjs教程</title>
      <link>https://my101du.github.io/1/01/reactjs-study/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/reactjs-study/</guid>
      <description>安装 React 与系列开发工具 手动安装包，或者为已经存在的项目启用 React # 初始化 package.json 文件 npm init # 必须安装 react 和 react-dom npm install --save react react-dom 推荐使用官方的脚手架 create-react-app 创建一个新的 React 项</description>
    </item>
    
    <item>
      <title>react库-界面与文本相关</title>
      <link>https://my101du.github.io/1/01/react%E5%BA%93-%E7%95%8C%E9%9D%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react%E5%BA%93-%E7%95%8C%E9%9D%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E7%9B%B8%E5%85%B3/</guid>
      <description>动态修改 title (在浏览器标签页上的文本) https://dev.to/luispa/how-to-add-a-dynamic-title-on-your-react-app----3l0j npm i react-helmet in the component import Helmet from &amp;lsquo;react-helmet&amp;rsquo;; in the router</description>
    </item>
    
    <item>
      <title>redis 内存数据库</title>
      <link>https://my101du.github.io/1/01/redis-%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/redis-%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>redis 内存数据库 install macOS brew install redis brew info redis # start/stop at system init ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis.plist # start server launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist # or redis-server /usr/local/etc/redis.conf # or brew services start redis # test is running redis-cli ping # uninstall brew uninstall redis rm ~/Library/LaunchAgents/homebrew.mxcl.redis.plist 设置密码 sudo nano /etc/redis/redis.conf # 去掉注释， foobared 就</description>
    </item>
    
  </channel>
</rss>
