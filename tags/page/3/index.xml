<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tags on my101du Blog</title>
    <link>https://my101du.github.io/tags/</link>
    <description>Recent content in Tags on my101du Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    
        <atom:link href="https://my101du.github.io/tags/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/node-%E5%BA%93%E5%88%97%E8%A1%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/node-%E5%BA%93%E5%88%97%E8%A1%A8/</guid>
      <description>title: node 库列表 permalink: node-packages-list tags: foreground 常用全局库（一些工具等） esformmater (React 基础库）react, react-dom, prop-types (React 路由) react-router,react-router-dom 脚手架 &amp;amp; 框架 umi https://github.com/umijs/umi 类 Next.js 的 React 应用框架 classnames (为 Promise 添加 finally) promise.prototype.finally (时间库) moment</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/%E4%B8%80%E4%BA%9B%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/%E4%B8%80%E4%BA%9B%E5%BA%93/</guid>
      <description>一些库 https://github.com/rematch/rematch/</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E5%BA%93hightlight.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E5%BA%93hightlight.js/</guid>
      <description>&lt;p&gt;title: 代码高亮库Hightlight.js
permalink: code-highlight-js
tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;highlight&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/%E6%89%80%E8%A7%81%E5%8D%B3%E6%89%80%E5%BE%97%E7%BC%96%E8%BE%91%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/%E6%89%80%E8%A7%81%E5%8D%B3%E6%89%80%E5%BE%97%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
      <description>title: 所见即所得编辑器 permalink: wysiwyg-editor tags: frontend CKEditor 5.x还在 alpha 版本 https://ckeditor.com/ckeditor-5-builds/#classic 4.x 文档 https://docs.ckeditor.com/ckeditor4/docs/#!/guide/dev_installation 文件比较大，可以自己build 一个需要的 https://ckeditor.com/cke4/builder TinyMCE （2018-01-02 更新） 尽量不要用这个</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/%E6%8B%96%E6%94%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/%E6%8B%96%E6%94%BE/</guid>
      <description>拖放 react-dnd http://react-dnd.github.io/react-dnd/ http://react-dnd.github.io/react-dnd/examples 好像更注重“拖放”。 与 Trello 同一个公司的 react-beautiful-dnd https://github.com/atlassian/react-beautiful-dnd 好像更注重“在列表之间的 cards 拖放” 它自己说的：目的是为了一个漂亮的 dnd. 可能并没有完全有 react-dnd 的完整</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/puppeteer-phantomjs-chromelesschrome-headless%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/puppeteer-phantomjs-chromelesschrome-headless%E6%A8%A1%E5%BC%8F/</guid>
      <description>title: puppeteer-友好的Headless Chrome Node API permalink: putteteer-headless-chrome-node-api tags: frontend Chrome 团队出品的一款更友好的Headless Chrome Node API，用于代替用户在页面上面点击、拖</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/angularjs/</guid>
      <description>title: AngularJS permalink: angular tags: angular https://angular.io 准备知识 Javascript Node TypeScript 快速开始 安装环境与创建一个项目 npm install -g @angular/cli ng new my-app 默认文件结构 运行项目 cd my-app ng serve --open 打开 locahost:4200 (默认端口 4200) 编译项目，从源码文件</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/angularjs%E6%95%99%E7%A8%8B-1.x-%E6%97%A7%E7%89%88%E6%9C%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/angularjs%E6%95%99%E7%A8%8B-1.x-%E6%97%A7%E7%89%88%E6%9C%AC/</guid>
      <description>&lt;p&gt;title: AngularJS教程 (1.x 旧版本)
permalink: study-angularjs
tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AngularJS&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://my101du.github.io/media/15490411859301/angularjs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Angular是Google出品的一个MV*前端框架.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/antd-react-%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/antd-react-%E6%A1%88%E4%BE%8B/</guid>
      <description>Index, Page， Router, Provider App pages (Login, 404&amp;hellip;) Components SideCustom &amp;amp; SiderMenu static getDerivedStateFromProps https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops 处理是否 menu 为收缩/展开（从 props 修改 state 数据） menuClick 处理菜单点击 state - selectedKey openMenu 展开？ state - openKey render , 内部嵌入 SiderMenu &amp;lt;SiderMenu menus={routes.menus} onClick={this.menuClick} selectedKeys={[selectedKey]} openKeys={firstHide ? null</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/dva/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/dva/</guid>
      <description>title: dva permalink: dva-and-react tags: foreground dva is a React and redux based, lightweight and elm-style framework, which supports side effects, hot module replacement, dynamic on demand, react-native, and SSR. It has been widely used in production environments. elm 概念，通过 reducers, effects 和 subscriptions 组织 model dva 经朋友推荐开始接触 dva ，从 1.x 版本开始使</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/mobx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/mobx/</guid>
      <description>mobx permalink: mobx-and-react tags: foreground 安装 安装 npm install -save mobx mobx-react 样板工程 https://github.com/mobxjs/mobx-react-boilerplate 入门 装饰器？ https://aotu.io/notes/2016/10/24/decorator/index.html 概念与原则 State(状态) 状态 是驱动应用的数据。 通常有像待办事项列表这样的领域特定状态</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/react-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-hooks/</guid>
      <description>关于 Hook React 16.7.0-alpha 版本推出的新特性 React Hooks 要解决的问题是状态共享，是继 render-props 和 higher-order components 之后的第三种状态共享方案，不会产生 JSX 嵌套地狱问题。 状态共享可能描述的不恰当</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/react-router4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-router4/</guid>
      <description>title: react router(4) permalink: react-router tags: foreground Understand these nouns: Router(BrowserRouter or HistoryRouter) Swtich Route Link Redirect withRouter Sample: import { BrowserRouter as Router, Switch, Route, Redirect, withRouter } from &#39;react-router-dom&#39;; import TestComponent from &#39;./TestComponent&#39; @withRouter export default class App extends React.Component { //... return ( &amp;lt;div&amp;gt; &amp;lt;Link to=&amp;quot;/test&amp;quot;&amp;gt;test&amp;lt;/Link&amp;gt; &amp;lt;Router&amp;gt; &amp;lt;Switch&amp;gt; &amp;lt;Route path=&amp;quot;/&amp;quot; exact component={Dashboard} /&amp;gt; &amp;lt;Route path=&amp;quot;/test&amp;quot; exact component={Test} /&amp;gt; &amp;lt;Redirect from=&amp;quot;/accounts&amp;quot; to=&amp;quot;/users&amp;quot; /&amp;gt; &amp;lt;Route component={NoMatch} /&amp;gt; &amp;lt;/Switch&amp;gt; &amp;lt;/Router&amp;gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/react-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E6%8A%80%E5%B7%A7/</guid>
      <description>title: React 常见问题与技巧 permalink: react-problem-tips tags: react 常见问题 Element type is invalid: expected a string(for build-in components) or a class/function&amp;hellip; 命令行创建组件 https://www.npmjs.com/package/react-create react-create component Home --entry 其他 https://www.npmjs.com/package/react.cli &amp;hellip; 在 React 里读取配置参数 使用 axios 等网络请求时，需要一个 “r</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/react-%E7%9A%84-render-props/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-%E7%9A%84-render-props/</guid>
      <description>React 的 render props React 16+ render props是一个组件间共享代码逻辑的小技巧, 通过props传递函数来实现。有许多库(比如React Router, React Motion)都使用了这</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/react-%E7%9A%84-ui-%E7%BB%84%E4%BB%B6%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-%E7%9A%84-ui-%E7%BB%84%E4%BB%B6%E5%BA%93/</guid>
      <description>title: React 的 UI 组件库 permalink: react-ui-library tags: react Material UI(1.x) 安装与使用 npm install --save @material-ui/core 如果用 cdn 方式 &amp;lt;script src=&amp;quot;https://unpkg.com/@material-ui/core/umd/material-ui.production.min.js&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 引入 Roboto 字体 &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500&amp;quot;&amp;gt; 开始使用 import React from &#39;react&#39;; import Button from &#39;@material-ui/core/Button&#39;; const App = () =&amp;gt; ( &amp;lt;Button variant=&amp;quot;contained&amp;quot; color=&amp;quot;primary&amp;quot;&amp;gt; Hello World &amp;lt;/Button&amp;gt; ); 使用自定义颜</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/react-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E4%B8%8E%E8%BF%94%E5%9B%9E%E5%80%BC%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E4%B8%8E%E8%BF%94%E5%9B%9E%E5%80%BC%E5%A4%84%E7%90%86/</guid>
      <description>title: react 网络请求与返回值处理 permalink: react-network-request-and-response tags: frontend 使用 Axios 或 Fetch, 替代 jQuery 的 ajax 请求 封装 axios request, 简化 get/post/put 方法的代码，以及让异常消息更可读, 返回 Promise 对象 首先 import axios 库 然后设置一些默认</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/reactjs-%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/reactjs-%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0/</guid>
      <description>title: ReactJS 案例学习 permalink: react-js-case-study tags: foreground 学完基础，做个 todo。还是有一些不够清晰的地方。 以及开发辅助工具的使用 还有对页面、组件的规划，代码习惯等等 React 全家桶 https://blog.csdn.net/column/details/14545.html react</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/reactjs%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/reactjs%E6%95%99%E7%A8%8B/</guid>
      <description>title: reactjs教程 permalink: reactjs-study tags: React 前端 安装 React 与系列开发工具 手动安装包，或者为已经存在的项目启用 React # 初始化 package.json 文件 npm init # 必须安装 react 和 react-dom npm install --save react react-dom 推荐使</description>
    </item>
    
    <item>
      <title></title>
      <link>https://my101du.github.io/1/01/react%E5%BA%93-%E7%95%8C%E9%9D%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react%E5%BA%93-%E7%95%8C%E9%9D%A2%E4%B8%8E%E6%96%87%E6%9C%AC%E7%9B%B8%E5%85%B3/</guid>
      <description>动态修改 title (在浏览器标签页上的文本) https://dev.to/luispa/how-to-add-a-dynamic-title-on-your-react-app----3l0j npm i react-helmet in the component import Helmet from &amp;lsquo;react-helmet&amp;rsquo;; in the router</description>
    </item>
    
  </channel>
</rss>
