<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>思考 on my101du Blog</title>
    <link>https://my101du.github.io/tags/%E6%80%9D%E8%80%83/</link>
    <description>Recent content in 思考 on my101du Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    
        <atom:link href="https://my101du.github.io/tags/%E6%80%9D%E8%80%83/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redux 封装库</title>
      <link>https://my101du.github.io/1/01/redux-%E5%B0%81%E8%A3%85%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/redux-%E5%B0%81%E8%A3%85%E5%BA%93/</guid>
      <description>Redux 封装库 Redux 的 reducer action 等繁琐的写法，催生了一些封装 redux 的库. 例如一些思路就是“model&amp;rdquo; redux saga https://github.com/redux-saga/redux-saga An alternative side effect model for Redux apps 比较复杂。。。 和 thunkMiddle 的关系</description>
    </item>
    
    <item>
      <title>RelationShip 模型关联</title>
      <link>https://my101du.github.io/1/01/relationship-%E6%A8%A1%E5%9E%8B%E5%85%B3%E8%81%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/relationship-%E6%A8%A1%E5%9E%8B%E5%85%B3%E8%81%94/</guid>
      <description>RelationShip 模型关联 数据表之间经常会互相进行关联。例如， 一篇 博客文章可能会有N 条 评论 一张 订单可能对应一个 下单客户. 可以使用 Eloquent 来管理和处理这些关联. 一对</description>
    </item>
    
    <item>
      <title>Repository 模式</title>
      <link>https://my101du.github.io/1/01/repository-%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/repository-%E6%A8%A1%E5%BC%8F/</guid>
      <description>Repository 模式 都是从 Java 里面学习来的。。。 这是什么 Repository 模式主要思想是建立一个数据操作代理层，把controller里的数据操作剥离出来 an architectural layer that handles communication between the application</description>
    </item>
    
    <item>
      <title>REST API</title>
      <link>https://my101du.github.io/1/01/rest-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/rest-api/</guid>
      <description>REST API slug: wordpress-rest-api tags: wordpress 简介 https://developer.wordpress.org/rest-api/ 访问下以下地址，返回 json 数据内容，确保 REST API 服务是打开的（有的插件可以把它关闭） www.sample.org/wp-json/wp/v2/posts 以及带参数的 www.sample.org/wp-json/wp/v2/posts?per_page=8&amp;amp;page=1&amp;amp;orderby=date&amp;amp;order=desc 自定义返回的字段 有时候获取 blog 列</description>
    </item>
    
    <item>
      <title>REST API 规范与文档生成</title>
      <link>https://my101du.github.io/1/01/rest-api-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/rest-api-%E8%A7%84%E8%8C%83%E4%B8%8E%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/</guid>
      <description>REST API 规范与文档生成 基本 设计 从客户端的角度设计后端接口 https://www.jianshu.com/p/a3828971a59f 合并 API 请求 &amp;amp; 独立多个 API https://segmentfault.com/a/1190000015665465 (测试加载时间对比) 注意：测试都是用“干净”的无缓存情况下测试</description>
    </item>
    
    <item>
      <title>roadhog 快速且功能强大的react项目搭建工具</title>
      <link>https://my101du.github.io/1/01/react-roadhog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/react-roadhog/</guid>
      <description>官方说明是 Cli tool for creating react apps, configurable version of create-react-app</description>
    </item>
    
    <item>
      <title>Samba文件共享服务</title>
      <link>https://my101du.github.io/1/01/samba-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/samba-server/</guid>
      <description>选择 NFS/Samba 碎文件多，nfs 有优势，否则，smb 兼容性好。 碎文件数量临界点，2w 个，具体可以自己谷歌国外 nfs 和 smb 的测评 Samba 服务 Samba 是在Linux和UNI</description>
    </item>
    
    <item>
      <title>scrapy</title>
      <link>https://my101du.github.io/1/01/scrapy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/scrapy/</guid>
      <description>scrapy install &amp;amp; Start pip3 install scrapy create a new .py file, named &amp;ldquo;myspider.py&amp;rdquo;, content is import scrapy class BlogSpider(scrapy.Spider): name = blogspider&#39; start_urls = [&#39;https://blog.scrapinghub.com&#39;] def parse(self, response): for title in response.css(&#39;.post-header&amp;gt;h2&#39;): yield {&#39;title&#39;: title.css(&#39;a ::text&#39;).extract_first()} for next_page in response.css(&#39;div.prev-post &amp;gt; a&#39;): yield response.follow(next_page, self.parse) pass this py file to scrapy command scrapy runspider myspider.py 运行成功，抓到了想要的数据 如</description>
    </item>
    
    <item>
      <title>SCSS</title>
      <link>https://my101du.github.io/1/01/scss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/scss/</guid>
      <description>SCSS 有各种好处，使用 SCSS 处理器将它转成 CSS 编写 scss 样式文件 从例子来学习, 创建目录和文件 styles base.scss iconfont.scss mixin.scss 首先看 base.scss /*导入外部文件*/ @import &amp;quot;./mixin&amp;quot;; @import &amp;quot;./iconfont&amp;quot;; /*这些都和 CSS 标准</description>
    </item>
    
    <item>
      <title>SEO</title>
      <link>https://my101du.github.io/1/01/seo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/seo/</guid>
      <description>TKD 是什么 Title Keyword Description https://baike.baidu.com/item/Tkd/4373693?fr=aladdin Google &amp;ldquo;Sitelink&amp;rdquo; 最早是Google开始使用。对一些权重比较高的网站，Google除了会返回正常列表外，还会在搜索结果里列出的在同一个网站</description>
    </item>
    
    <item>
      <title>serverless</title>
      <link>https://my101du.github.io/1/01/serverless/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/serverless/</guid>
      <description>基础 https://github.com/serverless/serverless serverless-offline https://github.com/dherault/serverless-offline 资料 https://www.jianshu.com/p/51a19ef5f8cf</description>
    </item>
    
    <item>
      <title>SharePoint</title>
      <link>https://my101du.github.io/1/01/sharepoint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/sharepoint/</guid>
      <description>SharePoint 学习资源 https://sharepoint.protiviti.com/blog/Lists/Categories/Category.aspx?CategoryId=5&amp;amp;Name=SharePoint+Development SharePoint 创建站点 进入首页， 例如 https://pulse478.sharepoint.com/_layouts/15/sharepoint.aspx 添加应用 SharePoint Page Web 添加 css js 文件到 page 例如 bootstrap 有关的 js 和 css, 以及自己的 css 样式文件 选 Script Editor 然后就可以在源码模式下使用了</description>
    </item>
    
    <item>
      <title>Shop</title>
      <link>https://my101du.github.io/1/01/shop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/shop/</guid>
      <description>电商案例 来自 Learnku 的购买教程 前言 结构 用户中心； 收货地址； 电商管理后台； 权限管理； 商品管理； 商品 SKU； 购物车模块； 订单模块； 支付模块（支付宝、微</description>
    </item>
    
    <item>
      <title>Sketch教程</title>
      <link>https://my101du.github.io/1/01/sketch-study/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/sketch-study/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SL</title>
      <link>https://my101du.github.io/1/01/sl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/sl/</guid>
      <description>SL 思维体系的几个维度 要理解，它能帮助形成清晰的思维，归纳概括、综合分析、提出对策。 从不同的角度切入，或者从不同的角度结合 写不出东西，不是背诵</description>
    </item>
    
    <item>
      <title>slim framework</title>
      <link>https://my101du.github.io/1/01/slim-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/slim-framework/</guid>
      <description>官网 安装slim 以及依赖 composer require slim/slim &amp;quot;^3.0&amp;quot; 使用 在 index.php 文件中 require &#39;vendor/autoload.php&#39;; $app = new Slim\App(); $app-&amp;gt;get(&#39;/hello/{name}&#39;, function ($request, $response, $args) { return $response-&amp;gt;getBody()-&amp;gt;write(&amp;quot;Hello, &amp;quot; . $args[&#39;name&#39;]); }); $app-&amp;gt;run(); 使用 php 内置 web 服务快速启动 php -S localhost:8000 测试 $ phpunit</description>
    </item>
    
    <item>
      <title>SQL Server</title>
      <link>https://my101du.github.io/1/01/ms-sql-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/ms-sql-server/</guid>
      <description>SSMS(SQL Server Management Studio) SQL Server 2008安装错误，提示提供有效的账户和密码，都填上了还是不行 将服务改成 network service，密码为空，下一步再设置 SQL Server 的密码 其他工具</description>
    </item>
    
    <item>
      <title>SSH服务安装与配置</title>
      <link>https://my101du.github.io/1/01/ssh-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/ssh-server/</guid>
      <description>安装 SSH 服务 http://blog.csdn.net/netwalk/article/details/12952051 安装服务端 Ubuntu缺省没有安装SSH Server，使用以下命令安装： sudo apt-get install openssh-server 然后确认sshserver是否启动了：（或用“n</description>
    </item>
    
    <item>
      <title>Sublime Text调教</title>
      <link>https://my101du.github.io/1/01/amazing-editor-sublime-text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/amazing-editor-sublime-text/</guid>
      <description>Sublime Text 是一个代码编辑器……后面的内容我不想复制了，你们自己百度吧。 因为我是一个靠写代码为生的人，每天工作的时候，使用时间最长的除了浏览器就是编</description>
    </item>
    
    <item>
      <title>superagent或node-crawler抓取页面，并用Cheerio或JSDOM解析DOM</title>
      <link>https://my101du.github.io/1/01/superagent%E6%88%96node-crawler%E6%8A%93%E5%8F%96%E9%A1%B5%E9%9D%A2%E5%B9%B6%E7%94%A8cheerio%E6%88%96jsdom%E8%A7%A3%E6%9E%90dom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://my101du.github.io/1/01/superagent%E6%88%96node-crawler%E6%8A%93%E5%8F%96%E9%A1%B5%E9%9D%A2%E5%B9%B6%E7%94%A8cheerio%E6%88%96jsdom%E8%A7%A3%E6%9E%90dom/</guid>
      <description>crawling/scraping node-crawer 爬虫工具 （或 superagent 请求代理模块+express） 结合 cheerio / jsdom 解析爬到的 html 内容(可以认为是 Node.js 版的 jquery) node-crawer （推荐） 安装 npm install crawler Basic Usage 开始 先引入 library requi</description>
    </item>
    
  </channel>
</rss>
